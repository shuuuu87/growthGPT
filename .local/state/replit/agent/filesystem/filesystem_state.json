{"file_contents":{"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Flame, Calendar as CalendarIcon, TrendingUp, Award, Trophy } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { StudySessionWithScore, QuizResult, Goal, StudyActivity, AchievementWithProgress } from \"@shared/schema\";\nimport { AddSessionDialog } from \"@/components/add-session-dialog\";\nimport { SessionList } from \"@/components/session-list\";\nimport { ProgressChart } from \"@/components/progress-chart\";\nimport { StreakCounter } from \"@/components/streak-counter\";\nimport { GoalCalendar } from \"@/components/goal-calendar\";\nimport { QuizModal } from \"@/components/quiz-modal\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [addSessionOpen, setAddSessionOpen] = useState(false);\n  const [quizSessionId, setQuizSessionId] = useState<string | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch study sessions\n  const { data: sessions = [] } = useQuery<StudySessionWithScore[]>({\n    queryKey: [\"/api/sessions\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch 7-day activity\n  const { data: activity = [] } = useQuery<StudyActivity[]>({\n    queryKey: [\"/api/activity/me\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch goals\n  const { data: goals = [] } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch streak\n  const { data: streakData } = useQuery<{ streak: number }>({\n    queryKey: [\"/api/streak\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch achievements\n  const { data: achievements = [] } = useQuery<AchievementWithProgress[]>({\n    queryKey: [\"/api/achievements/me\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleCompleteSession = (sessionId: string) => {\n    setQuizSessionId(sessionId);\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-12 gap-6\">\n          {/* Main Content - Left Column */}\n          <div className=\"lg:col-span-8 space-y-6\">\n            {/* Study Sessions Card */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between gap-4 space-y-0 pb-4\">\n                <CardTitle className=\"text-2xl font-bold\">Study Sessions</CardTitle>\n                <Button\n                  onClick={() => setAddSessionOpen(true)}\n                  data-testid=\"button-add-session\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Session\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <SessionList\n                  sessions={sessions}\n                  onCompleteSession={handleCompleteSession}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Progress Chart Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  7-Day Progress\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ProgressChart activity={activity} />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"lg:col-span-4 space-y-6\">\n            {/* Streak Counter */}\n            <StreakCounter streak={streakData?.streak || 0} />\n\n            {/* Achievement Stats */}\n            <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-2\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />\n                  Achievements\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-bold text-purple-600 dark:text-purple-400\" data-testid=\"text-achievement-total\">\n                    {achievements.filter(a => a.unlocked).length}/{achievements.length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Unlocked</div>\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-2 text-center\">\n                  <div>\n                    <div className=\"text-lg font-bold text-yellow-600 dark:text-yellow-400\">\n                      {achievements.filter(a => a.unlocked && a.rarity === 'legendary').length}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Legendary</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-bold text-purple-600 dark:text-purple-400\">\n                      {achievements.filter(a => a.unlocked && a.rarity === 'epic').length}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Epic</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                      {achievements.filter(a => a.unlocked && a.rarity === 'rare').length}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Rare</div>\n                  </div>\n                </div>\n\n                <Link href=\"/achievements\">\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-achievements\">\n                    <Award className=\"w-4 h-4 mr-2\" />\n                    View All\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Goal Calendar */}\n            <GoalCalendar goals={goals} />\n          </div>\n        </div>\n      </div>\n\n      {/* Dialogs */}\n      <AddSessionDialog\n        open={addSessionOpen}\n        onOpenChange={setAddSessionOpen}\n      />\n\n      {quizSessionId && (\n        <QuizModal\n          sessionId={quizSessionId}\n          onClose={() => setQuizSessionId(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7121},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 3.53%;\n  --foreground: 0 0% 92.16%;\n  --border: 0 0% 16.86%;\n\n  --card: 300 4.35% 6.67%;\n  --card-foreground: 0 0% 100%;\n  --card-border: 220 13% 93%;\n\n  --sidebar: 45 25% 97%;\n  --sidebar-foreground: 20 14% 17%;\n  --sidebar-border: 45 15% 80%;\n  --sidebar-primary: 9 75% 61%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 25 45% 80%;\n  --sidebar-accent-foreground: 20 14% 17%;\n  --sidebar-ring: 9 75% 61%;\n\n  --popover: 45 25% 97%;\n  --popover-foreground: 20 14% 17%;\n  --popover-border: 220 13% 86%;\n\n  --primary: 0 0% 96.08%;\n  --primary-foreground: 0 0% 5.1%;\n\n  --secondary: 0 0% 92.16%;\n  --secondary-foreground: 0 0% 5.1%;\n\n  --muted: 0 0% 25.1%;\n  --muted-foreground: 0 0% 67.06%;\n\n  --accent: 0 0% 92.16%;\n  --accent-foreground: 0 0% 0%;\n\n  --destructive: 356.3033 90.5579% 54.3137%;\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 16.86%;\n  --ring: 221.74 13.14% 34.31%;\n\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Inter', sans-serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.4rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 2px 4px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 4px 6px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 8px 10px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 20 14% 4%;\n  --foreground: 45 25% 91%;\n  --border: 20 14% 15%;\n\n  --card: 20 14% 8%;\n  --card-foreground: 45 25% 85%;\n  --card-border: 222 13% 15%;\n\n  --sidebar: 20 14% 8%;\n  --sidebar-foreground: 45 25% 85%;\n  --sidebar-border: 20 14% 15%;\n  --sidebar-primary: 9 75% 61%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 25 45% 20%;\n  --sidebar-accent-foreground: 45 25% 85%;\n  --sidebar-ring: 9 75% 61%;\n\n  --popover: 20 14% 4%;\n  --popover-foreground: 45 25% 91%;\n  --popover-border: 222 13% 20%;\n\n  --primary: 9 75% 61%;\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 30 15% 52%;\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 20 14% 15%;\n  --muted-foreground: 45 15% 46%;\n\n  --accent: 25 45% 20%;\n  --accent-foreground: 45 25% 85%;\n\n  --destructive: 356.3033 90.5579% 54.3137%;\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 20 14% 18%;\n  --ring: 9 75% 61%;\n\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.22), 0px 2px 4px -2px hsl(0 0% 0% / 0.15);\n  --shadow-md: 0px 6px 8px -2px hsl(0 0% 0% / 0.28), 0px 2px 4px -2px hsl(0 0% 0% / 0.18);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.30), 0px 4px 6px -4px hsl(0 0% 0% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.35), 0px 8px 10px -6px hsl(0 0% 0% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    position: relative;\n    min-height: 100vh;\n    background: linear-gradient(-45deg, #1a0b2e, #2d1b4e, #4a1a1a, #2d0a2d) !important;\n    background-size: 400% 400% !important;\n    animation: gradientFlow 15s ease infinite !important;\n  }\n\n  body::before {\n    content: '';\n    position: fixed;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    z-index: 0;\n    pointer-events: none;\n    background: \n      radial-gradient(circle at 20% 50%, rgba(255, 107, 107, 0.25) 0%, transparent 30%),\n      radial-gradient(circle at 80% 80%, rgba(138, 80, 255, 0.2) 0%, transparent 30%),\n      radial-gradient(circle at 40% 90%, rgba(255, 80, 150, 0.2) 0%, transparent 25%);\n    animation: floatingOrbs 20s ease-in-out infinite;\n  }\n}\n\n#root {\n  position: relative;\n  z-index: 1;\n}\n\n@keyframes gradientFlow {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n@keyframes floatingOrbs {\n  0%, 100% {\n    transform: translate(0, 0) rotate(0deg);\n    opacity: 1;\n  }\n  25% {\n    transform: translate(10%, 10%) rotate(90deg);\n    opacity: 0.8;\n  }\n  50% {\n    transform: translate(0, 20%) rotate(180deg);\n    opacity: 1;\n  }\n  75% {\n    transform: translate(-10%, 10%) rotate(270deg);\n    opacity: 0.9;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11949},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Auth from \"@/pages/auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Achievements from \"@/pages/achievements\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={Auth} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/leaderboard\" component={Leaderboard} />\n          <Route path=\"/achievements\" component={Achievements} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <TooltipProvider>\n      {!isLoading && isAuthenticated ? (\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar user={user} />\n            <div className=\"flex flex-col flex-1 overflow-hidden\">\n              <header className=\"flex items-center justify-between p-4 border-b bg-background\">\n                <div className=\"flex items-center gap-4\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <h1 className=\"text-xl font-bold text-primary\">Growth GPT</h1>\n                </div>\n                <button\n                  onClick={async () => {\n                    try {\n                      await fetch(\"/api/logout\", { method: \"POST\" });\n                      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n                      window.location.href = \"/\";\n                    } catch (error) {\n                      console.error(\"Logout failed:\", error);\n                    }\n                  }}\n                  className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </button>\n              </header>\n              <main className=\"flex-1 overflow-y-auto\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n      ) : (\n        <Router />\n      )}\n      <Toaster />\n    </TooltipProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppContent />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3117},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"server/localAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"your-secret-key-change-this\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        \n        if (!user) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        const isValidPassword = await bcrypt.compare(password, user.password);\n        \n        if (!isValidPassword) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    })\n  );\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n","size_bytes":2133},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/quiz-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, Trophy, Target } from \"lucide-react\";\nimport { AchievementUnlockNotification } from \"@/components/achievement-unlock-notification\";\n\ninterface Question {\n  question: string;\n  options: string[];\n  correctAnswer: number;\n}\n\ninterface QuizModalProps {\n  sessionId: string;\n  onClose: () => void;\n}\n\nexport function QuizModal({ sessionId, onClose }: QuizModalProps) {\n  const { toast } = useToast();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState<Record<number, number>>({});\n  const [showResults, setShowResults] = useState(false);\n  const [quizScore, setQuizScore] = useState<{ score: number; total: number } | null>(null);\n  const [newAchievements, setNewAchievements] = useState<string[]>([]);\n\n  // Fetch quiz questions\n  const { data: quizData, isLoading } = useQuery<{ questions: Question[] }>({\n    queryKey: [\"/api/quiz\", sessionId],\n    retry: false,\n  });\n\n  // Submit quiz mutation\n  const submitMutation = useMutation({\n    mutationFn: async (answers: Record<number, number>) => {\n      const response = await apiRequest(\"POST\", `/api/quiz/${sessionId}/submit`, {\n        answers,\n      });\n      const result = await response.json();\n      console.log(\"Quiz submission response:\", result);\n      return result;\n    },\n    onSuccess: (data: any) => {\n      console.log(\"Quiz onSuccess data:\", data);\n      console.log(\"data.score:\", data.score);\n      console.log(\"data.totalQuestions:\", data.totalQuestions);\n      const score = Number(data.score) || 0;\n      const total = Number(data.totalQuestions) || 1;\n      console.log(\"Parsed score:\", score, \"total:\", total);\n      setQuizScore({ score, total });\n      setShowResults(true);\n      if (data.newAchievements && data.newAchievements.length > 0) {\n        setNewAchievements(data.newAchievements);\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity/me\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/streak\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/achievements/me\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit quiz. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnswerSelect = (questionIndex: number, answerIndex: number) => {\n    setSelectedAnswers((prev) => ({\n      ...prev,\n      [questionIndex]: answerIndex,\n    }));\n  };\n\n  const handleNext = () => {\n    if (quizData && currentQuestionIndex < quizData.questions.length - 1) {\n      setCurrentQuestionIndex((prev) => prev + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex((prev) => prev - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    submitMutation.mutate(selectedAnswers);\n  };\n\n  const getEncouragingMessage = (percentage: number) => {\n    if (percentage === 100) return \"Perfect score! Outstanding! 🎉\";\n    if (percentage >= 80) return \"Excellent work! Keep it up! 🌟\";\n    if (percentage >= 60) return \"Good job! You're making progress! 👏\";\n    if (percentage >= 40) return \"Nice try! Review and try again! 💪\";\n    return \"Keep learning! Every attempt makes you better! 📚\";\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-quiz\">\n          <DialogHeader>\n            <DialogTitle>Generating Quiz</DialogTitle>\n          </DialogHeader>\n          <div className=\"flex flex-col items-center justify-center py-12\">\n            <Loader2 className=\"w-12 h-12 animate-spin text-primary mb-4\" />\n            <p className=\"text-lg font-medium\">Generating your quiz...</p>\n            <p className=\"text-sm text-muted-foreground\">AI is creating personalized questions</p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!quizData || !quizData.questions || quizData.questions.length === 0) {\n    return (\n      <Dialog open onOpenChange={onClose}>\n        <DialogContent data-testid=\"dialog-quiz-error\">\n          <DialogHeader>\n            <DialogTitle>Quiz Generation Failed</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-6 text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              We couldn't generate questions for this topic. Please try again.\n            </p>\n            <Button onClick={onClose}>Close</Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const currentQuestion = quizData.questions[currentQuestionIndex];\n  const totalQuestions = quizData.questions.length;\n  const allAnswered = Object.keys(selectedAnswers).length === totalQuestions;\n\n  return (\n    <>\n      {newAchievements.length > 0 && (\n        <AchievementUnlockNotification\n          achievementIds={newAchievements}\n          onClose={() => setNewAchievements([])}\n        />\n      )}\n      <Dialog open onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-quiz\">\n          {showResults && quizScore ? (\n          // Results View\n          <>\n            <DialogHeader>\n              <DialogTitle>Quiz Complete!</DialogTitle>\n            </DialogHeader>\n            <div className=\"py-8 text-center\">\n              <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Trophy className=\"w-10 h-10 text-primary\" />\n              </div>\n              <div className=\"text-6xl font-extrabold text-primary my-6\" data-testid=\"text-quiz-score\">\n                {quizScore.total > 0 ? Math.round((quizScore.score / quizScore.total) * 100) : 0}%\n              </div>\n              <p className=\"text-lg mb-2\">\n                {quizScore.score} out of {quizScore.total} correct\n              </p>\n              <p className=\"text-muted-foreground mb-8\">\n                {getEncouragingMessage(quizScore.total > 0 ? (quizScore.score / quizScore.total) * 100 : 0)}\n              </p>\n              <Button onClick={onClose} size=\"lg\" data-testid=\"button-close-results\">\n                Continue\n              </Button>\n            </div>\n            </>\n          ) : (\n            // Quiz View\n            <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <span>Question {currentQuestionIndex + 1} of {totalQuestions}</span>\n                <div className=\"flex gap-1\">\n                  {Array.from({ length: totalQuestions }).map((_, idx) => (\n                    <div\n                      key={idx}\n                      className={`w-2 h-2 rounded-full ${\n                        idx in selectedAnswers\n                          ? \"bg-primary\"\n                          : \"bg-muted\"\n                      }`}\n                    />\n                  ))}\n                </div>\n              </DialogTitle>\n            </DialogHeader>\n\n            <div className=\"py-6\">\n              <h3 className=\"text-xl font-semibold mb-6\" data-testid=\"text-question\">\n                {currentQuestion.question}\n              </h3>\n\n              <RadioGroup\n                value={selectedAnswers[currentQuestionIndex]?.toString()}\n                onValueChange={(value) =>\n                  handleAnswerSelect(currentQuestionIndex, parseInt(value))\n                }\n              >\n                <div className=\"space-y-3\">\n                  {currentQuestion.options.map((option, idx) => (\n                    <div\n                      key={idx}\n                      className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${\n                        selectedAnswers[currentQuestionIndex] === idx\n                          ? \"border-primary bg-primary/10\"\n                          : \"border-border hover:border-primary/50 hover:bg-primary/5\"\n                      }`}\n                      onClick={() => handleAnswerSelect(currentQuestionIndex, idx)}\n                      data-testid={`option-${idx}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <RadioGroupItem value={idx.toString()} id={`option-${idx}`} />\n                        <Label\n                          htmlFor={`option-${idx}`}\n                          className=\"flex-1 cursor-pointer text-base\"\n                        >\n                          {option}\n                        </Label>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div className=\"flex gap-3 pt-4 border-t\">\n              <Button\n                variant=\"outline\"\n                onClick={handlePrevious}\n                disabled={currentQuestionIndex === 0}\n                className=\"flex-1\"\n                data-testid=\"button-previous\"\n              >\n                Previous\n              </Button>\n              {currentQuestionIndex < totalQuestions - 1 ? (\n                <Button\n                  onClick={handleNext}\n                  disabled={!(currentQuestionIndex in selectedAnswers)}\n                  className=\"flex-1\"\n                  data-testid=\"button-next\"\n                >\n                  Next\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleSubmit}\n                  disabled={!allAnswered || submitMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-submit-quiz\"\n                >\n                  {submitMutation.isPending ? \"Submitting...\" : \"Submit Quiz\"}\n                </Button>\n              )}\n            </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":10774},"client/src/pages/leaderboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Trophy, Flame, Medal } from \"lucide-react\";\nimport { UserProgressModal } from \"@/components/user-progress-modal\";\n\ninterface LeaderboardUser {\n  id: string;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  totalScore: number;\n  streak: number;\n}\n\nexport default function Leaderboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch leaderboard data\n  const { data: leaderboard = [] } = useQuery<LeaderboardUser[]>({\n    queryKey: [\"/api/leaderboard\"],\n    enabled: isAuthenticated,\n  });\n\n  const getMedalIcon = (rank: number) => {\n    if (rank === 1) return <Medal className=\"w-5 h-5 text-yellow-500\" />;\n    if (rank === 2) return <Medal className=\"w-5 h-5 text-gray-400\" />;\n    if (rank === 3) return <Medal className=\"w-5 h-5 text-amber-600\" />;\n    return null;\n  };\n\n  const getDisplayName = (user: LeaderboardUser) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user.firstName) return user.firstName;\n    return \"Student\";\n  };\n\n  const getInitials = (user: LeaderboardUser) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user.firstName) return user.firstName[0].toUpperCase();\n    return \"S\";\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"mb-8 text-center\">\n          <div className=\"inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4\">\n            <Trophy className=\"w-4 h-4\" />\n            Competition Leaderboard\n          </div>\n          <h1 className=\"text-4xl font-bold mb-2\">Top Students</h1>\n          <p className=\"text-muted-foreground\">\n            See where you stand among your peers\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"w-6 h-6 text-primary\" />\n              Rankings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {leaderboard.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                No students on the leaderboard yet. Be the first to study!\n              </div>\n            ) : (\n              <div className=\"divide-y\">\n                {leaderboard.map((user, index) => (\n                  <div\n                    key={user.id}\n                    className=\"flex items-center gap-4 p-4 hover-elevate cursor-pointer transition-all duration-200\"\n                    onClick={() => setSelectedUserId(user.id)}\n                    data-testid={`leaderboard-user-${index}`}\n                  >\n                    {/* Rank */}\n                    <div className=\"w-12 flex items-center justify-center\">\n                      {getMedalIcon(index + 1) || (\n                        <span className=\"text-lg font-bold text-muted-foreground\">\n                          {index + 1}\n                        </span>\n                      )}\n                    </div>\n\n                    {/* Avatar and Name */}\n                    <div className=\"flex items-center gap-3 flex-1\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarImage\n                          src={user.profileImageUrl || undefined}\n                          alt={getDisplayName(user)}\n                          className=\"object-cover\"\n                        />\n                        <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                          {getInitials(user)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"font-semibold text-lg\" data-testid={`text-username-${index}`}>\n                        {getDisplayName(user)}\n                      </span>\n                    </div>\n\n                    {/* Score */}\n                    <div className=\"flex items-center gap-6\">\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-muted-foreground\">Score</div>\n                        <div className=\"text-2xl font-bold text-primary\" data-testid={`text-score-${index}`}>\n                          {user.totalScore}\n                        </div>\n                      </div>\n\n                      {/* Streak */}\n                      <div className=\"flex items-center gap-2\">\n                        <Flame className=\"w-5 h-5 text-orange-500\" />\n                        <span className=\"text-xl font-bold\" data-testid={`text-streak-${index}`}>\n                          {user.streak}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Progress Modal */}\n      {selectedUserId && (\n        <UserProgressModal\n          userId={selectedUserId}\n          onClose={() => setSelectedUserId(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":6109},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/db.ts":{"content":"// Reference: javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":527},"client/src/components/streak-counter.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Flame } from \"lucide-react\";\n\ninterface StreakCounterProps {\n  streak: number;\n}\n\nexport function StreakCounter({ streak }: StreakCounterProps) {\n  return (\n    <Card className=\"bg-gradient-to-br from-orange-500/10 to-primary/10 border-orange-500/20\">\n      <CardContent className=\"p-8 text-center\">\n        <div className=\"flex items-center justify-center gap-3 mb-2\">\n          <Flame className=\"w-12 h-12 text-orange-500\" />\n          <div className=\"text-6xl font-extrabold\" data-testid=\"text-streak\">\n            {streak}\n          </div>\n        </div>\n        <p className=\"text-lg text-muted-foreground font-medium\">\n          {streak === 1 ? \"day streak\" : \"day streak\"}\n        </p>\n        {streak === 0 && (\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Complete a study session to start your streak!\n          </p>\n        )}\n        {streak > 0 && (\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Keep it up! Study daily to maintain your streak 🔥\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1150},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/replitAuth.ts":{"content":"// Reference: javascript_log_in_with_replit blueprint\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4275},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Zap } from \"lucide-react\";\nimport type { InsertUser, LoginCredentials } from \"@shared/schema\";\n\nexport default function Auth() {\n  const { toast } = useToast();\n  const [loginData, setLoginData] = useState<LoginCredentials>({\n    username: \"\",\n    password: \"\",\n  });\n  const [registerData, setRegisterData] = useState<Partial<InsertUser>>({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginCredentials) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      const message = error.message || \"Invalid username or password\";\n      const match = message.match(/\\d+:\\s*(.+)/);\n      const errorMessage = match ? match[1] : message;\n      \n      toast({\n        title: \"Login failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: Partial<InsertUser>) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to Growth GPT!\",\n      });\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      const message = error.message || \"Failed to create account\";\n      const match = message.match(/\\d+:\\s*(.+)/);\n      const errorMessage = match ? match[1] : message;\n      \n      toast({\n        title: \"Registration failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-background via-background to-primary/5 p-4\">\n      <Card className=\"w-full max-w-md p-8\">\n        <div className=\"text-center mb-6\">\n          <div className=\"inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4\">\n            <Zap className=\"w-4 h-4\" />\n            AI-Powered Study Companion\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\">\n            <span className=\"text-primary\">Growth GPT</span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Start your learning journey today\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">\n              Login\n            </TabsTrigger>\n            <TabsTrigger value=\"register\" data-testid=\"tab-register\">\n              Register\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-username\">Username</Label>\n                <Input\n                  id=\"login-username\"\n                  data-testid=\"input-login-username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={loginData.username}\n                  onChange={(e) =>\n                    setLoginData({ ...loginData, username: e.target.value })\n                  }\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-password\">Password</Label>\n                <Input\n                  id=\"login-password\"\n                  data-testid=\"input-login-password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={loginData.password}\n                  onChange={(e) =>\n                    setLoginData({ ...loginData, password: e.target.value })\n                  }\n                  required\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                data-testid=\"button-login-submit\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"register\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-username\">Username</Label>\n                <Input\n                  id=\"register-username\"\n                  data-testid=\"input-register-username\"\n                  type=\"text\"\n                  placeholder=\"Choose a username\"\n                  value={registerData.username}\n                  onChange={(e) =>\n                    setRegisterData({\n                      ...registerData,\n                      username: e.target.value,\n                    })\n                  }\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-password\">Password</Label>\n                <Input\n                  id=\"register-password\"\n                  data-testid=\"input-register-password\"\n                  type=\"password\"\n                  placeholder=\"Create a password (min 6 characters)\"\n                  value={registerData.password}\n                  onChange={(e) =>\n                    setRegisterData({\n                      ...registerData,\n                      password: e.target.value,\n                    })\n                  }\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-firstname\">First Name</Label>\n                <Input\n                  id=\"register-firstname\"\n                  data-testid=\"input-register-firstname\"\n                  type=\"text\"\n                  placeholder=\"Enter your first name\"\n                  value={registerData.firstName || \"\"}\n                  onChange={(e) =>\n                    setRegisterData({\n                      ...registerData,\n                      firstName: e.target.value,\n                    })\n                  }\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-lastname\">Last Name</Label>\n                <Input\n                  id=\"register-lastname\"\n                  data-testid=\"input-register-lastname\"\n                  type=\"text\"\n                  placeholder=\"Enter your last name\"\n                  value={registerData.lastName || \"\"}\n                  onChange={(e) =>\n                    setRegisterData({\n                      ...registerData,\n                      lastName: e.target.value,\n                    })\n                  }\n                  required\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                data-testid=\"button-register-submit\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8432},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/storage.ts":{"content":"// Reference: javascript_database and javascript_log_in_with_replit blueprints\nimport {\n  users,\n  studySessions,\n  quizResults,\n  goals,\n  studyActivity,\n  achievements,\n  userAchievements,\n  type User,\n  type UpsertUser,\n  type StudySession,\n  type InsertStudySession,\n  type QuizResult,\n  type InsertQuizResult,\n  type Goal,\n  type InsertGoal,\n  type StudyActivity,\n  type StudySessionWithScore,\n  type Achievement,\n  type UserAchievement,\n  type AchievementWithProgress,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserAvatar(id: string, profileImageUrl: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n\n  // Study sessions\n  getUserStudySessions(userId: string): Promise<StudySession[]>;\n  getUserStudySessionsWithScores(userId: string): Promise<StudySessionWithScore[]>;\n  createStudySession(userId: string, session: InsertStudySession): Promise<StudySession>;\n  getStudySession(id: string): Promise<StudySession | undefined>;\n  completeStudySession(id: string): Promise<StudySession>;\n\n  // Quiz results\n  createQuizResult(userId: string, result: InsertQuizResult): Promise<QuizResult>;\n  getUserQuizResults(userId: string): Promise<QuizResult[]>;\n\n  // Goals\n  getUserGoals(userId: string): Promise<Goal[]>;\n  createGoal(userId: string, goal: InsertGoal): Promise<Goal>;\n  completeGoal(id: string): Promise<Goal>;\n\n  // Study activity\n  getUserActivity(userId: string, days: number): Promise<StudyActivity[]>;\n  upsertActivity(userId: string, date: string, studyTime: number, score: number): Promise<void>;\n  getStreak(userId: string): Promise<number>;\n\n  // Achievements\n  getAllAchievements(): Promise<Achievement[]>;\n  getUserAchievements(userId: string): Promise<UserAchievement[]>;\n  getUserAchievementsWithProgress(userId: string): Promise<AchievementWithProgress[]>;\n  awardAchievement(userId: string, achievementId: string): Promise<UserAchievement | null>;\n  hasAchievement(userId: string, achievementId: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async updateUserAvatar(id: string, profileImageUrl: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ profileImageUrl, updatedAt: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Study sessions\n  async getUserStudySessions(userId: string): Promise<StudySession[]> {\n    return await db\n      .select()\n      .from(studySessions)\n      .where(eq(studySessions.userId, userId))\n      .orderBy(desc(studySessions.createdAt));\n  }\n\n  async getUserStudySessionsWithScores(userId: string): Promise<StudySessionWithScore[]> {\n    const sessions = await db\n      .select()\n      .from(studySessions)\n      .where(eq(studySessions.userId, userId))\n      .orderBy(desc(studySessions.createdAt));\n\n    if (sessions.length === 0) {\n      return [];\n    }\n\n    const allQuizResults = await db\n      .select()\n      .from(quizResults)\n      .where(eq(quizResults.userId, userId))\n      .orderBy(desc(quizResults.createdAt));\n\n    const quizResultMap = new Map<string, QuizResult>();\n    for (const result of allQuizResults) {\n      if (!quizResultMap.has(result.sessionId)) {\n        quizResultMap.set(result.sessionId, result);\n      }\n    }\n\n    const sessionsWithScores: StudySessionWithScore[] = sessions.map((session) => {\n      const quizResult = quizResultMap.get(session.id);\n      return {\n        ...session,\n        score: quizResult?.score,\n        totalQuestions: quizResult?.totalQuestions,\n      };\n    });\n\n    return sessionsWithScores;\n  }\n\n  async createStudySession(userId: string, session: InsertStudySession): Promise<StudySession> {\n    const [newSession] = await db\n      .insert(studySessions)\n      .values({ ...session, userId })\n      .returning();\n    return newSession;\n  }\n\n  async getStudySession(id: string): Promise<StudySession | undefined> {\n    const [session] = await db.select().from(studySessions).where(eq(studySessions.id, id));\n    return session;\n  }\n\n  async completeStudySession(id: string): Promise<StudySession> {\n    const [session] = await db\n      .update(studySessions)\n      .set({ completed: true, completedAt: new Date() })\n      .where(eq(studySessions.id, id))\n      .returning();\n    return session;\n  }\n\n  async storeQuizQuestions(id: string, questions: any): Promise<StudySession> {\n    const [session] = await db\n      .update(studySessions)\n      .set({ questions })\n      .where(eq(studySessions.id, id))\n      .returning();\n    return session;\n  }\n\n  // Quiz results\n  async createQuizResult(userId: string, result: InsertQuizResult): Promise<QuizResult> {\n    const [newResult] = await db\n      .insert(quizResults)\n      .values({ ...result, userId })\n      .returning();\n    return newResult;\n  }\n\n  async getUserQuizResults(userId: string): Promise<QuizResult[]> {\n    return await db\n      .select()\n      .from(quizResults)\n      .where(eq(quizResults.userId, userId))\n      .orderBy(desc(quizResults.createdAt));\n  }\n\n  // Goals\n  async getUserGoals(userId: string): Promise<Goal[]> {\n    return await db\n      .select()\n      .from(goals)\n      .where(eq(goals.userId, userId))\n      .orderBy(desc(goals.createdAt));\n  }\n\n  async createGoal(userId: string, goal: InsertGoal): Promise<Goal> {\n    const [newGoal] = await db\n      .insert(goals)\n      .values({ ...goal, userId })\n      .returning();\n    return newGoal;\n  }\n\n  async completeGoal(id: string): Promise<Goal> {\n    const [goal] = await db\n      .update(goals)\n      .set({ completed: true, completedAt: new Date() })\n      .where(eq(goals.id, id))\n      .returning();\n    return goal;\n  }\n\n  // Study activity\n  async getUserActivity(userId: string, days: number): Promise<StudyActivity[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    const startDateStr = startDate.toISOString().split(\"T\")[0];\n\n    return await db\n      .select()\n      .from(studyActivity)\n      .where(\n        and(\n          eq(studyActivity.userId, userId),\n          gte(studyActivity.date, startDateStr)\n        )\n      )\n      .orderBy(studyActivity.date);\n  }\n\n  async upsertActivity(userId: string, date: string, studyTime: number, score: number): Promise<void> {\n    await db\n      .insert(studyActivity)\n      .values({ userId, date, studyTime, score })\n      .onConflictDoUpdate({\n        target: [studyActivity.userId, studyActivity.date],\n        set: {\n          studyTime: sql`${studyActivity.studyTime} + ${studyTime}`,\n          score: sql`${studyActivity.score} + ${score}`,\n        },\n      });\n  }\n\n  async getStreak(userId: string): Promise<number> {\n    const activities = await db\n      .select()\n      .from(studyActivity)\n      .where(eq(studyActivity.userId, userId))\n      .orderBy(desc(studyActivity.date));\n\n    if (activities.length === 0) return 0;\n\n    let streak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    // Check if there's activity today or yesterday\n    const latestDate = new Date(activities[0].date);\n    latestDate.setHours(0, 0, 0, 0);\n    \n    const daysDiff = Math.floor((today.getTime() - latestDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    // Streak broken if last activity was more than 1 day ago\n    if (daysDiff > 1) return 0;\n\n    let currentDate = new Date(today);\n    if (daysDiff === 1) {\n      // If last activity was yesterday, start counting from yesterday\n      currentDate.setDate(currentDate.getDate() - 1);\n    }\n\n    for (const activity of activities) {\n      const activityDate = new Date(activity.date);\n      activityDate.setHours(0, 0, 0, 0);\n\n      if (activityDate.getTime() === currentDate.getTime()) {\n        streak++;\n        currentDate.setDate(currentDate.getDate() - 1);\n      } else {\n        break;\n      }\n    }\n\n    return streak;\n  }\n\n  // Achievements\n  async getAllAchievements(): Promise<Achievement[]> {\n    return await db.select().from(achievements);\n  }\n\n  async getUserAchievements(userId: string): Promise<UserAchievement[]> {\n    return await db\n      .select()\n      .from(userAchievements)\n      .where(eq(userAchievements.userId, userId))\n      .orderBy(desc(userAchievements.unlockedAt));\n  }\n\n  async getUserAchievementsWithProgress(userId: string): Promise<AchievementWithProgress[]> {\n    const allAchievements = await this.getAllAchievements();\n    const userAchievementsList = await this.getUserAchievements(userId);\n    \n    const userAchievementMap = new Map<string, UserAchievement>();\n    for (const ua of userAchievementsList) {\n      userAchievementMap.set(ua.achievementId, ua);\n    }\n\n    return allAchievements.map((achievement) => {\n      const userAchievement = userAchievementMap.get(achievement.id);\n      return {\n        ...achievement,\n        unlocked: !!userAchievement,\n        unlockedAt: userAchievement?.unlockedAt || null,\n      };\n    });\n  }\n\n  async awardAchievement(userId: string, achievementId: string): Promise<UserAchievement | null> {\n    const hasIt = await this.hasAchievement(userId, achievementId);\n    if (hasIt) {\n      return null;\n    }\n\n    const [newAchievement] = await db\n      .insert(userAchievements)\n      .values({ userId, achievementId })\n      .returning();\n    return newAchievement;\n  }\n\n  async hasAchievement(userId: string, achievementId: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(userAchievements)\n      .where(\n        and(\n          eq(userAchievements.userId, userId),\n          eq(userAchievements.achievementId, achievementId)\n        )\n      );\n    return !!result;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11017},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/goal-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar, Plus, Check } from \"lucide-react\";\nimport type { Goal } from \"@shared/schema\";\nimport confetti from \"canvas-confetti\";\n\ninterface GoalCalendarProps {\n  goals: Goal[];\n}\n\nexport function GoalCalendar({ goals }: GoalCalendarProps) {\n  const { toast } = useToast();\n  const [showAddGoal, setShowAddGoal] = useState(false);\n  const [newGoalTitle, setNewGoalTitle] = useState(\"\");\n  const [newGoalType, setNewGoalType] = useState<\"daily\" | \"weekly\">(\"daily\");\n\n  const createGoalMutation = useMutation({\n    mutationFn: async (data: { title: string; type: string; targetDate: string }) => {\n      await apiRequest(\"POST\", \"/api/goals\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({\n        title: \"Goal Created!\",\n        description: \"Your study goal has been added.\",\n      });\n      setNewGoalTitle(\"\");\n      setShowAddGoal(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create goal. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeGoalMutation = useMutation({\n    mutationFn: async (goalId: string) => {\n      await apiRequest(\"PATCH\", `/api/goals/${goalId}/complete`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      // Trigger confetti animation\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 },\n      });\n      toast({\n        title: \"🎉 Goal Completed!\",\n        description: \"Amazing work! Keep up the great progress!\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete goal. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddGoal = () => {\n    if (!newGoalTitle.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a goal title.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const targetDate = new Date();\n    if (newGoalType === \"weekly\") {\n      targetDate.setDate(targetDate.getDate() + 7);\n    }\n\n    createGoalMutation.mutate({\n      title: newGoalTitle,\n      type: newGoalType,\n      targetDate: targetDate.toISOString().split(\"T\")[0],\n    });\n  };\n\n  const activeGoals = goals.filter((g) => !g.completed);\n  const completedGoals = goals.filter((g) => g.completed);\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-4 space-y-0 pb-4\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"w-5 h-5 text-primary\" />\n          Goals\n        </CardTitle>\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={() => setShowAddGoal(!showAddGoal)}\n          data-testid=\"button-toggle-add-goal\"\n        >\n          <Plus className=\"w-4 h-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {showAddGoal && (\n          <div className=\"space-y-3 p-4 border rounded-lg bg-muted/30\">\n            <Input\n              placeholder=\"Goal title...\"\n              value={newGoalTitle}\n              onChange={(e) => setNewGoalTitle(e.target.value)}\n              data-testid=\"input-goal-title\"\n            />\n            <Select value={newGoalType} onValueChange={(v: any) => setNewGoalType(v)}>\n              <SelectTrigger data-testid=\"select-goal-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"daily\">Daily Goal</SelectItem>\n                <SelectItem value=\"weekly\">Weekly Goal</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              onClick={handleAddGoal}\n              disabled={createGoalMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-create-goal\"\n            >\n              {createGoalMutation.isPending ? \"Creating...\" : \"Create Goal\"}\n            </Button>\n          </div>\n        )}\n\n        {/* Active Goals */}\n        {activeGoals.length > 0 && (\n          <div className=\"space-y-2\">\n            {activeGoals.map((goal) => (\n              <div\n                key={goal.id}\n                className=\"flex items-start gap-3 p-3 border rounded-lg hover-elevate transition-all duration-200\"\n                data-testid={`goal-${goal.id}`}\n              >\n                <Button\n                  size=\"icon\"\n                  variant=\"outline\"\n                  className=\"shrink-0 w-8 h-8\"\n                  onClick={() => completeGoalMutation.mutate(goal.id)}\n                  disabled={completeGoalMutation.isPending}\n                  data-testid=\"button-complete-goal\"\n                >\n                  <Check className=\"w-4 h-4\" />\n                </Button>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-sm\">{goal.title}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {goal.type === \"daily\" ? \"Daily\" : \"Weekly\"} •{\" \"}\n                    {new Date(goal.targetDate).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Completed Goals */}\n        {completedGoals.length > 0 && (\n          <div className=\"space-y-2\">\n            <p className=\"text-xs text-muted-foreground uppercase tracking-wide font-semibold\">\n              Completed\n            </p>\n            {completedGoals.slice(0, 3).map((goal) => (\n              <div\n                key={goal.id}\n                className=\"flex items-start gap-3 p-3 border rounded-lg bg-muted/30 opacity-60\"\n              >\n                <div className=\"shrink-0 w-8 h-8 bg-green-500 rounded flex items-center justify-center\">\n                  <Check className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-sm line-through\">{goal.title}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Completed {goal.completedAt && new Date(goal.completedAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {activeGoals.length === 0 && completedGoals.length === 0 && (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Calendar className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No goals yet</p>\n            <p className=\"text-xs mt-1\">Set daily or weekly study goals!</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7963},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/openai.ts":{"content":"// Using OpenRouter.ai with Llama 3.3 70B model\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENROUTER_API_KEY,\n  baseURL: \"https://openrouter.ai/api/v1\",\n  defaultHeaders: {\n    \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\n    \"HTTP-Referer\": process.env.REPLIT_DOMAINS || \"http://localhost:5000\",\n    \"X-Title\": \"Growth GPT\",\n  },\n});\n\ninterface MCQQuestion {\n  question: string;\n  options: string[];\n  correctAnswer: number;\n}\n\nexport async function generateMCQQuestions(topic: string, subject: string): Promise<MCQQuestion[]> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"meta-llama/llama-3.3-70b-instruct:free\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert educator creating multiple choice questions for students. Generate exactly 5 questions about the given topic. Each question should have 4 answer options (A, B, C, D) with only ONE correct answer. The wrong answers should be plausible but clearly incorrect. Format your response exactly like this:\n\n1. Q: What is the capital of France?\n   A: London\n   B: Paris\n   C: Berlin\n   D: Madrid\n   CORRECT: B\n\n2. Q: What gas do plants absorb during photosynthesis?\n   A: Oxygen\n   B: Nitrogen\n   C: Carbon Dioxide\n   D: Hydrogen\n   CORRECT: C`,\n        },\n        {\n          role: \"user\",\n          content: `Create 5 multiple choice questions about \"${topic}\" in the subject of ${subject}. Make them educational, clear, and appropriate for students. Each question must have 4 different answer options with only one correct answer.`,\n        },\n      ],\n      max_completion_tokens: 1024,\n    });\n\n    const content = response.choices[0].message.content || \"\";\n    \n    // Parse the response to extract questions and answers\n    const questions = parseQuestionsFromText(content, topic);\n    \n    if (questions.length === 0) {\n      throw new Error(\"No questions were generated\");\n    }\n\n    return questions;\n  } catch (error: any) {\n    console.error(\"Error generating MCQ questions:\", error);\n    throw new Error(\"Failed to generate quiz questions: \" + error.message);\n  }\n}\n\nfunction parseQuestionsFromText(text: string, topic: string): MCQQuestion[] {\n  const questions: MCQQuestion[] = [];\n  \n  // Try to parse the multiple choice format\n  const lines = text.split('\\n');\n  let currentQuestion = '';\n  let currentOptions: string[] = [];\n  let correctAnswer = -1;\n  \n  for (const line of lines) {\n    const trimmed = line.trim();\n    \n    // Match question pattern (1. Q: or just Q:)\n    if (trimmed.match(/^\\d+\\.\\s*Q:/i) || trimmed.startsWith('Q:')) {\n      // Save previous question if complete\n      if (currentQuestion && currentOptions.length === 4 && correctAnswer >= 0) {\n        questions.push({\n          question: currentQuestion,\n          options: currentOptions,\n          correctAnswer: correctAnswer,\n        });\n      }\n      // Reset for new question\n      currentQuestion = trimmed.replace(/^\\d+\\.\\s*Q:\\s*/i, '').replace(/^Q:\\s*/i, '').trim();\n      currentOptions = [];\n      correctAnswer = -1;\n    }\n    // Match option patterns (A:, B:, C:, D:)\n    else if (trimmed.match(/^[A-D]:/i)) {\n      const optionText = trimmed.replace(/^[A-D]:\\s*/i, '').trim();\n      currentOptions.push(optionText);\n    }\n    // Match correct answer pattern (CORRECT: B)\n    else if (trimmed.match(/^CORRECT:\\s*[A-D]/i)) {\n      const correctLetter = trimmed.replace(/^CORRECT:\\s*/i, '').trim().toUpperCase();\n      correctAnswer = correctLetter.charCodeAt(0) - 'A'.charCodeAt(0);\n    }\n  }\n  \n  // Add the last question if complete\n  if (currentQuestion && currentOptions.length === 4 && correctAnswer >= 0) {\n    questions.push({\n      question: currentQuestion,\n      options: currentOptions,\n      correctAnswer: correctAnswer,\n    });\n  }\n  \n  // If parsing failed, create fallback questions\n  if (questions.length === 0) {\n    return createFallbackQuestions(topic);\n  }\n  \n  return questions.slice(0, 5); // Return max 5 questions\n}\n\nfunction createQuestion(questionText: string, correctAnswer: string): MCQQuestion {\n  // Create a multiple choice question with the correct answer and 3 distractors\n  const options = [correctAnswer.toLowerCase()];\n  \n  // Add simple distractors based on answer type\n  const answer = correctAnswer.toLowerCase();\n  \n  // Generate context-appropriate distractors\n  if (!isNaN(Number(answer))) {\n    // Numeric answer - add nearby numbers\n    const num = Number(answer);\n    options.push(String(num + 1), String(num - 1), String(num * 2));\n  } else if (answer.length <= 3) {\n    // Short answer - add generic options\n    options.push('yes', 'no', 'none');\n  } else {\n    // Text answer - add generic distractors\n    options.push('unknown', 'none', 'other');\n  }\n  \n  // Shuffle options and find correct answer index\n  const shuffled = Array.from(new Set(options)).slice(0, 4);\n  const correctIndex = shuffled.findIndex(opt => opt.toLowerCase() === answer);\n  \n  return {\n    question: questionText,\n    options: shuffled,\n    correctAnswer: correctIndex >= 0 ? correctIndex : 0,\n  };\n}\n\nfunction createFallbackQuestions(topic: string): MCQQuestion[] {\n  // Fallback questions in case parsing fails\n  return [\n    {\n      question: `What is the primary focus when studying ${topic}?`,\n      options: ['Understanding core concepts and principles', 'Memorizing dates only', 'Learning unrelated subjects', 'Ignoring practical applications'],\n      correctAnswer: 0,\n    },\n    {\n      question: `Why is learning about ${topic} important?`,\n      options: ['It builds foundational knowledge', 'It has no practical use', 'It only matters for tests', 'It should be avoided'],\n      correctAnswer: 0,\n    },\n    {\n      question: `What approach is best for mastering ${topic}?`,\n      options: ['Regular practice and review', 'Cramming before exams', 'Avoiding difficult concepts', 'Skipping fundamentals'],\n      correctAnswer: 0,\n    },\n  ];\n}\n","size_bytes":5970},"client/src/components/add-session-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { insertStudySessionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertStudySessionSchema.extend({\n  estimatedTime: z.coerce.number().min(1, \"Must be at least 1 minute\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AddSessionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst SUBJECTS = [\n  \"Mathematics\",\n  \"Science\",\n  \"History\",\n  \"English\",\n  \"Physics\",\n  \"Chemistry\",\n  \"Biology\",\n  \"Computer Science\",\n  \"Economics\",\n  \"Psychology\",\n  \"Other\",\n];\n\nexport function AddSessionDialog({ open, onOpenChange }: AddSessionDialogProps) {\n  const { toast } = useToast();\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      topic: \"\",\n      subject: \"\",\n      estimatedTime: 30,\n      completed: false,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      await apiRequest(\"POST\", \"/api/sessions\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Study session created successfully.\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create study session. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-add-session\">\n        <DialogHeader>\n          <DialogTitle>Add Study Session</DialogTitle>\n          <DialogDescription>\n            Create a new study session. Complete it to unlock AI-generated quizzes!\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"topic\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Topic / Chapter Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"e.g., Photosynthesis, Algebra Basics, World War II\"\n                      {...field}\n                      data-testid=\"input-topic\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"subject\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-subject\">\n                        <SelectValue placeholder=\"Select a subject\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {SUBJECTS.map((subject) => (\n                        <SelectItem key={subject} value={subject}>\n                          {subject}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"estimatedTime\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Estimated Time (minutes)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      placeholder=\"30\"\n                      {...field}\n                      data-testid=\"input-estimated-time\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-create-session\"\n              >\n                {mutation.isPending ? \"Creating...\" : \"Create Session\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5987},"client/src/components/session-list.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, BookOpen, CheckCircle2, Award } from \"lucide-react\";\nimport type { StudySessionWithScore } from \"@shared/schema\";\n\ninterface SessionListProps {\n  sessions: StudySessionWithScore[];\n  onCompleteSession: (sessionId: string) => void;\n}\n\nexport function SessionList({ sessions, onCompleteSession }: SessionListProps) {\n  if (sessions.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No Study Sessions Yet</h3>\n        <p className=\"text-muted-foreground mb-4\">\n          Start your learning journey by creating your first study session!\n        </p>\n      </div>\n    );\n  }\n\n  const activeSessions = sessions.filter((s) => !s.completed);\n  const completedSessions = sessions.filter((s) => s.completed);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Active Sessions */}\n      {activeSessions.length > 0 && (\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wide\">\n            Active Sessions\n          </h3>\n          {activeSessions.map((session) => (\n            <div\n              key={session.id}\n              className=\"p-4 border rounded-lg hover-elevate transition-all duration-200\"\n              data-testid={`session-${session.id}`}\n            >\n              <div className=\"flex items-start justify-between gap-4\">\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <h4 className=\"font-semibold text-lg\" data-testid=\"text-topic\">\n                      {session.topic}\n                    </h4>\n                    <Badge variant=\"secondary\" data-testid=\"badge-subject\">\n                      {session.subject}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span>{session.estimatedTime} min</span>\n                    </div>\n                  </div>\n                </div>\n                <Button\n                  onClick={() => onCompleteSession(session.id)}\n                  data-testid=\"button-mark-complete\"\n                >\n                  <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                  Mark Complete\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Completed Sessions */}\n      {completedSessions.length > 0 && (\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wide\">\n            Completed Sessions\n          </h3>\n          {completedSessions.map((session) => (\n            <div\n              key={session.id}\n              className=\"p-4 border rounded-lg bg-muted/30\"\n              data-testid={`session-completed-${session.id}`}\n            >\n              <div className=\"flex items-start justify-between gap-4\">\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <h4 className=\"font-semibold text-lg text-muted-foreground\">\n                      {session.topic}\n                    </h4>\n                    <Badge variant=\"secondary\">{session.subject}</Badge>\n                    <Badge variant=\"default\" className=\"bg-green-500 hover:bg-green-600\">\n                      <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                      Completed\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div>\n                      {session.completedAt &&\n                        new Date(session.completedAt).toLocaleDateString()}\n                    </div>\n                    {session.score !== undefined && session.totalQuestions !== undefined && (\n                      <div className=\"flex items-center gap-1.5 text-sm font-medium\">\n                        <Award className=\"w-4 h-4 text-yellow-500\" />\n                        <span data-testid={`score-${session.id}`}>\n                          Score: {session.score}/{session.totalQuestions} ({Math.round((session.score / session.totalQuestions) * 100)}%)\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4788},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/app-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Home, Trophy, User, Edit, Award } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChangeAvatarDialog } from \"@/components/change-avatar-dialog\";\nimport type { User as UserType } from \"@shared/schema\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Leaderboard\",\n    url: \"/leaderboard\",\n    icon: Trophy,\n  },\n  {\n    title: \"Achievements\",\n    url: \"/achievements\",\n    icon: Award,\n  },\n];\n\ninterface AppSidebarProps {\n  user?: UserType;\n}\n\nexport function AppSidebar({ user }: AppSidebarProps) {\n  const [location] = useLocation();\n  const [showAvatarDialog, setShowAvatarDialog] = useState(false);\n\n  const getDisplayName = () => {\n    if (!user) return \"Student\";\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user.firstName) return user.firstName;\n    return \"Student\";\n  };\n\n  const getInitials = () => {\n    if (!user) return \"S\";\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user.firstName) return user.firstName[0].toUpperCase();\n    return \"S\";\n  };\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"relative group\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage\n                src={user?.profileImageUrl || undefined}\n                alt={getDisplayName()}\n                className=\"object-cover\"\n              />\n              <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                {getInitials()}\n              </AvatarFallback>\n            </Avatar>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute -bottom-1 -right-1 h-5 w-5 rounded-full bg-background border shadow-sm hover:bg-accent\"\n              onClick={() => setShowAvatarDialog(true)}\n              data-testid=\"button-change-avatar\"\n            >\n              <Edit className=\"h-3 w-3\" />\n            </Button>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-semibold text-sm truncate\">{getDisplayName()}</p>\n            <p className=\"text-xs text-muted-foreground truncate\">{user?.email || \"\"}</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase()}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      {user && showAvatarDialog && (\n        <ChangeAvatarDialog\n          open={showAvatarDialog}\n          onClose={() => setShowAvatarDialog(false)}\n          currentUser={user}\n        />\n      )}\n    </Sidebar>\n  );\n}\n","size_bytes":3847},"design_guidelines.md":{"content":"# Growth GPT Design Guidelines\n\n## Design Philosophy\nGrowth GPT should feel like a supportive study partner, not just a tracking tool. The interface combines minimal aesthetics with motivational elements to inspire consistent student engagement and healthy competition.\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from:\n- **Duolingo**: Gamification, streak mechanics, and motivational design patterns\n- **Linear**: Clean minimalism, smooth animations, precise typography\n- **Notion**: Card-based layouts and comfortable information density\n\n## Color Palette\n- **Primary Blue**: Use for CTAs, active states, progress indicators, and streak badges\n- **White**: Primary background and card surfaces\n- **Light Gray**: (#F7F9FC - #E5E7EB range) for subtle backgrounds, borders, and secondary text\n- **Success Green**: For completed goals and positive feedback\n- **Accent Colors**: Soft gold/yellow for streak flames, confetti celebrations\n\n## Typography\n**Font Family**: Inter or DM Sans from Google Fonts\n- **Headings**: \n  - H1: 2.5rem (40px), font-weight 700, tight letter-spacing\n  - H2: 1.875rem (30px), font-weight 600\n  - H3: 1.5rem (24px), font-weight 600\n- **Body Text**: 1rem (16px), font-weight 400-500\n- **Small Text**: 0.875rem (14px) for labels and metadata\n- **Numbers/Stats**: Font-weight 700, slightly larger sizing for emphasis\n\n## Layout System\n**Spacing Scale**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20\n- Component padding: p-6 to p-8\n- Card spacing: gap-6 between cards\n- Section margins: my-12 to my-20\n- Container: max-w-7xl with px-6 for content breathing room\n\n## Component Library\n\n### Authentication Pages (Login/Register)\n- **Layout**: Centered card (max-w-md) on soft gradient background\n- **Card Design**: White surface, rounded-2xl (16px radius), shadow-xl\n- **Form Fields**: \n  - Full-width inputs with rounded-lg borders\n  - Focus state: blue ring with slight scale transform\n  - Generous padding (p-3) for touch-friendly interaction\n- **Primary Button**: Full-width, rounded-lg, blue background with white text, py-3\n- **Secondary Actions**: Text links in gray, hover to blue transition\n- **Divider**: \"OR\" text centered with horizontal lines on sides\n- **Google Button**: White background, border, Google icon + text, rounded-lg\n\n### Dashboard\n**Three-Column Layout** (on desktop):\n1. **Left Sidebar** (w-64): \n   - Navigation menu with icons\n   - User profile snippet at top\n   - Sticky positioning\n   \n2. **Main Content Area** (flex-1):\n   - **Study Sessions Card**: \n     - Header with \"Add Session\" button (blue, rounded-lg)\n     - Session list items: rounded-lg cards with topic name, subject badge, time estimate\n     - \"Mark Complete\" button triggers quiz modal\n   \n   - **7-Day Chart Card**:\n     - Dual-axis bar chart (Recharts)\n     - Blue bars for scores, light gray for study time\n     - Rounded-lg card container with p-6\n     - Subtle grid lines, clean axis labels\n   \n3. **Right Sidebar** (w-80):\n   - **Streak Counter**: \n     - Large number display (4rem, font-weight 800)\n     - Flame icon (🔥 or SVG) next to count\n     - Subtitle: \"day streak\" in gray\n     - Gradient background (blue to light blue)\n     - Rounded-2xl with p-8\n   \n   - **Goal Calendar**:\n     - Mini calendar grid (7×5)\n     - Checkable day cells with hover states\n     - Completed days: blue background with checkmark\n     - Current day: blue ring outline\n     - Goal completion triggers confetti animation (canvas-confetti library)\n\n### Quiz Modal\n- **Overlay**: Semi-transparent dark background (backdrop-blur-sm)\n- **Modal Card**: \n  - max-w-2xl, centered, white background, rounded-2xl\n  - Question text: text-xl, font-semibold, mb-6\n  - **MCQ Options**: \n    - Radio button cards: rounded-lg, p-4, border-2\n    - Hover state: border-blue-400, bg-blue-50\n    - Selected: border-blue-600, bg-blue-100\n  - **Submit Button**: Primary blue button at bottom\n  - **Results View**: \n    - Score display: Large number (3rem) with percentage\n    - Correct/incorrect breakdown with icons\n    - Encouraging message based on score\n    - \"Continue\" button to close\n\n### People/Leaderboard Page\n- **Header Section**: \n  - Page title (H1) with trophy icon\n  - Search bar (if many users): rounded-full, light gray background\n  \n- **Leaderboard Table**:\n  - Rank column: Bold numbers with top 3 getting medal icons (🥇🥈🥉)\n  - User column: Avatar (circular, w-10 h-10) + username\n  - Score column: Bold blue numbers\n  - Streak column: Flame icon + count\n  - **Alternating row backgrounds**: White and very light gray (#FAFBFC)\n  - Hover state: Subtle scale (1.01) and shadow increase\n  - Rounded-lg on entire table container\n\n- **User Profile Modal**: \n  - Triggered on username click\n  - Shows 7-day mini chart for that user\n  - No personal data, just progress visualization\n  - Close button (X) in top-right\n\n## Visual Effects & Animations\n\n**Transitions**: 200ms ease-in-out for all interactive elements\n\n**Micro-interactions**:\n- Button hover: Slight scale (1.02) + shadow increase\n- Card hover: Shadow deepens, subtle lift (translateY(-2px))\n- Completed checkbox: Scale animation (0.8 → 1.2 → 1) with green checkmark fade-in\n- Confetti: Burst from center for goal completions (duration: 3s)\n\n**Loading States**: \n- Skeleton screens with animated gradient shimmer (light gray to white)\n- Blue spinner for async operations\n\n## Card Design System\nAll cards follow consistent pattern:\n- Background: White (#FFFFFF)\n- Border: None (use shadow instead)\n- Border-radius: rounded-xl (12px) or rounded-2xl (16px)\n- Shadow: shadow-md default, shadow-lg on hover\n- Padding: p-6 standard, p-8 for feature cards\n\n## Responsive Behavior\n- **Desktop** (lg:): Three-column dashboard layout\n- **Tablet** (md:): Two-column (main + one sidebar)\n- **Mobile** (base): Single column, stack all elements\n  - Bottom navigation bar for main sections\n  - Chart becomes scrollable/compact version\n  - Calendar uses swipe gestures for month navigation\n\n## Motivational Elements\n- **Empty States**: Friendly illustrations with encouraging copy (\"Start your first study session!\")\n- **Achievement Badges**: Display when milestones reached (7-day streak, 100 total score, etc.)\n- **Progress Indicators**: Circular progress rings for daily goals\n- **Positive Reinforcement**: Success messages with celebratory language and emojis\n\n## Images\nNo hero images required for this application. Focus remains on data visualization, cards, and functional UI elements. Use icon libraries (Heroicons or Lucide) for all iconography needs.","size_bytes":6550},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/user-progress-modal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Loader2 } from \"lucide-react\";\nimport { ProgressChart } from \"./progress-chart\";\nimport type { StudyActivity, User } from \"@shared/schema\";\n\ninterface UserProgressModalProps {\n  userId: string;\n  onClose: () => void;\n}\n\nexport function UserProgressModal({ userId, onClose }: UserProgressModalProps) {\n  // Fetch user data\n  const { data: user, isLoading: userLoading } = useQuery<User>({\n    queryKey: [\"/api/users\", userId],\n  });\n\n  // Fetch user's 7-day activity\n  const { data: activity = [], isLoading: activityLoading } = useQuery<StudyActivity[]>({\n    queryKey: [\"/api/activity\", userId],\n  });\n\n  const getDisplayName = (user: User) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user.firstName) return user.firstName;\n    return \"Student\";\n  };\n\n  const getInitials = (user: User) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user.firstName) return user.firstName[0].toUpperCase();\n    return \"S\";\n  };\n\n  return (\n    <Dialog open onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl\" data-testid=\"dialog-user-progress\">\n        {userLoading || activityLoading ? (\n          <>\n            <DialogHeader>\n              <DialogTitle>Loading Progress...</DialogTitle>\n            </DialogHeader>\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n            </div>\n          </>\n        ) : user ? (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-3\">\n                <Avatar className=\"w-12 h-12\">\n                  <AvatarImage\n                    src={user.profileImageUrl || undefined}\n                    alt={getDisplayName(user)}\n                    className=\"object-cover\"\n                  />\n                  <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                    {getInitials(user)}\n                  </AvatarFallback>\n                </Avatar>\n                <span>{getDisplayName(user)}'s Progress</span>\n              </DialogTitle>\n            </DialogHeader>\n\n            <div className=\"py-4\">\n              <h3 className=\"font-semibold mb-4\">7-Day Activity</h3>\n              <ProgressChart activity={activity} />\n            </div>\n          </>\n        ) : (\n          <>\n            <DialogHeader>\n              <DialogTitle>User Not Found</DialogTitle>\n            </DialogHeader>\n            <div className=\"py-8 text-center text-muted-foreground\">\n              User not found\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2982},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./localAuth\";\nimport { generateMCQQuestions } from \"./openrouter\";\nimport { insertStudySessionSchema, insertQuizResultSchema, insertGoalSchema, insertUserSchema, loginSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport passport from \"passport\";\nimport { getRandomAvatar } from \"@shared/avatars\";\nimport { checkAndAwardAchievements } from \"./achievement-checker\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.post('/api/register', async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      \n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword,\n        profileImageUrl: getRandomAvatar(),\n      });\n\n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Registration successful but login failed\" });\n        }\n        const { password, ...userWithoutPassword } = user;\n        res.json(userWithoutPassword);\n      });\n    } catch (error: any) {\n      console.error(\"Error registering user:\", error);\n      \n      if (error.code === '23505') {\n        if (error.detail?.includes('username')) {\n          return res.status(400).json({ message: \"Username already exists\" });\n        }\n        if (error.detail?.includes('email')) {\n          return res.status(400).json({ message: \"Email already exists\" });\n        }\n      }\n      \n      if (error.issues) {\n        return res.status(400).json({ message: error.issues[0]?.message || \"Validation error\" });\n      }\n      \n      res.status(400).json({ message: error.message || \"Failed to register\" });\n    }\n  });\n\n  app.post('/api/login', (req, res, next) => {\n    try {\n      loginSchema.parse(req.body);\n      \n      passport.authenticate('local', (err: any, user: any, info: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"An error occurred during login\" });\n        }\n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid username or password\" });\n        }\n        \n        req.login(user, (loginErr) => {\n          if (loginErr) {\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          const { password, ...userWithoutPassword } = user;\n          res.json(userWithoutPassword);\n        });\n      })(req, res, next);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid request\" });\n    }\n  });\n\n  app.post('/api/logout', (req, res) => {\n    req.logout({ keepSessionInfo: false }, (err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      req.session.destroy((sessionErr) => {\n        if (sessionErr) {\n          return res.status(500).json({ message: \"Failed to destroy session\" });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ message: \"Logged out successfully\" });\n      });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch('/api/user/avatar', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('[AVATAR UPDATE] Starting avatar update for user:', req.user.id);\n      console.log('[AVATAR UPDATE] Request body:', req.body);\n      \n      const userId = req.user.id;\n      const { profileImageUrl } = req.body;\n\n      if (!profileImageUrl || typeof profileImageUrl !== 'string') {\n        console.log('[AVATAR UPDATE] Invalid profileImageUrl:', profileImageUrl);\n        return res.status(400).json({ message: \"Invalid profile image URL\" });\n      }\n\n      console.log('[AVATAR UPDATE] Updating avatar to:', profileImageUrl);\n      await storage.updateUserAvatar(userId, profileImageUrl);\n      \n      console.log('[AVATAR UPDATE] Fetching updated user');\n      const updatedUser = await storage.getUserById(userId);\n      \n      if (!updatedUser) {\n        console.log('[AVATAR UPDATE] User not found after update');\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Update the session with the new user data\n      req.user = updatedUser;\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      console.log('[AVATAR UPDATE] Sending response with updated user');\n      res.setHeader('Content-Type', 'application/json');\n      return res.json(userWithoutPassword);\n    } catch (error: any) {\n      console.error(\"[AVATAR UPDATE] Error:\", error);\n      return res.status(500).json({ message: error.message || \"Failed to update profile image\" });\n    }\n  });\n\n  // Study sessions routes\n  app.get(\"/api/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sessions = await storage.getUserStudySessionsWithScores(userId);\n      console.log('[DEBUG] Sessions with scores:', JSON.stringify(sessions, null, 2));\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch sessions\" });\n    }\n  });\n\n  app.post(\"/api/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertStudySessionSchema.parse(req.body);\n      const session = await storage.createStudySession(userId, validatedData);\n      res.json(session);\n    } catch (error: any) {\n      console.error(\"Error creating session:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create session\" });\n    }\n  });\n\n  // Quiz routes\n  app.get(\"/api/quiz/:sessionId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await storage.getStudySession(sessionId);\n\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      if (session.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      // Check if questions are already generated, otherwise generate new ones\n      let questions = session.questions;\n      if (!questions) {\n        questions = await generateMCQQuestions(session.topic, session.subject);\n        await storage.storeQuizQuestions(sessionId, questions);\n      }\n\n      res.json({ questions });\n    } catch (error: any) {\n      console.error(\"Error generating quiz:\", error);\n      res.status(500).json({ message: \"Failed to generate quiz\" });\n    }\n  });\n\n  app.post(\"/api/quiz/:sessionId/submit\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { sessionId } = req.params;\n      const { answers } = req.body;\n      const userId = req.user.id;\n\n      const session = await storage.getStudySession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      // Get stored questions for grading\n      const questions = session.questions;\n      if (!questions || !Array.isArray(questions)) {\n        return res.status(400).json({ message: \"Quiz questions not found\" });\n      }\n\n      console.log(\"Grading quiz:\");\n      console.log(\"Answers received:\", JSON.stringify(answers));\n      console.log(\"Questions count:\", questions.length);\n\n      // Calculate score by comparing user answers with correct answers\n      let score = 0;\n      questions.forEach((q: any, idx: number) => {\n        const userAnswer = answers[idx];\n        const correctAnswer = q.correctAnswer;\n        const isCorrect = userAnswer === correctAnswer;\n        \n        console.log(`Question ${idx}: user=${userAnswer}, correct=${correctAnswer}, match=${isCorrect}`);\n        \n        if (isCorrect) {\n          score++;\n        }\n      });\n\n      console.log(\"Final score:\", score, \"out of\", questions.length);\n\n      // Store quiz result\n      const quizResult = await storage.createQuizResult(userId, {\n        sessionId,\n        score,\n        totalQuestions: questions.length,\n        questions,\n        userAnswers: answers,\n      });\n\n      // Mark session as completed\n      await storage.completeStudySession(sessionId);\n\n      // Update study activity\n      const today = new Date().toISOString().split(\"T\")[0];\n      await storage.upsertActivity(userId, today, session.estimatedTime, score);\n\n      // Check and award achievements\n      const newAchievements = await checkAndAwardAchievements(userId, quizResult);\n\n      res.json({\n        score,\n        totalQuestions: questions.length,\n        percentage: Math.round((score / questions.length) * 100),\n        newAchievements,\n      });\n    } catch (error: any) {\n      console.error(\"Error submitting quiz:\", error);\n      res.status(500).json({ message: \"Failed to submit quiz\" });\n    }\n  });\n\n  // Activity routes\n  app.get(\"/api/activity/me\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const activity = await storage.getUserActivity(userId, 7);\n      res.json(activity);\n    } catch (error) {\n      console.error(\"Error fetching activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity\" });\n    }\n  });\n\n  app.get(\"/api/activity/:userId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const activity = await storage.getUserActivity(userId, 7);\n      res.json(activity);\n    } catch (error) {\n      console.error(\"Error fetching activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity\" });\n    }\n  });\n\n  // Streak route\n  app.get(\"/api/streak\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const streak = await storage.getStreak(userId);\n      res.json({ streak });\n    } catch (error) {\n      console.error(\"Error fetching streak:\", error);\n      res.status(500).json({ message: \"Failed to fetch streak\" });\n    }\n  });\n\n  // Goals routes\n  app.get(\"/api/goals\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const goals = await storage.getUserGoals(userId);\n      res.json(goals);\n    } catch (error) {\n      console.error(\"Error fetching goals:\", error);\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(userId, validatedData);\n      res.json(goal);\n    } catch (error: any) {\n      console.error(\"Error creating goal:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create goal\" });\n    }\n  });\n\n  app.patch(\"/api/goals/:goalId/complete\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { goalId } = req.params;\n      const goal = await storage.completeGoal(goalId);\n      res.json(goal);\n    } catch (error) {\n      console.error(\"Error completing goal:\", error);\n      res.status(500).json({ message: \"Failed to complete goal\" });\n    }\n  });\n\n  // Leaderboard route\n  app.get(\"/api/leaderboard\", isAuthenticated, async (req: any, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      \n      // Calculate scores and streaks for all users\n      const leaderboardData = await Promise.all(\n        allUsers.map(async (user) => {\n          const activity = await storage.getUserActivity(user.id, 365);\n          const totalScore = activity.reduce((sum, a) => sum + a.score, 0);\n          const streak = await storage.getStreak(user.id);\n          \n          return {\n            id: user.id,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            profileImageUrl: user.profileImageUrl,\n            totalScore,\n            streak,\n          };\n        })\n      );\n\n      // Sort by total score descending\n      leaderboardData.sort((a, b) => b.totalScore - a.totalScore);\n\n      res.json(leaderboardData);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // User profile route\n  app.get(\"/api/users/:userId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Achievement routes\n  app.get(\"/api/achievements\", isAuthenticated, async (req: any, res) => {\n    try {\n      const achievements = await storage.getAllAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get(\"/api/achievements/me\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log(\"[ACHIEVEMENTS] Fetching achievements for user:\", userId);\n      \n      const allAchievements = await storage.getAllAchievements();\n      console.log(\"[ACHIEVEMENTS] Total achievements in DB:\", allAchievements.length);\n      \n      const achievements = await storage.getUserAchievementsWithProgress(userId);\n      console.log(\"[ACHIEVEMENTS] Achievements with progress:\", achievements.length);\n      \n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  app.get(\"/api/achievements/user/:userId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const userAchievements = await storage.getUserAchievements(userId);\n      res.json(userAchievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15052},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"replit.md":{"content":"# Growth GPT - AI-Powered Student Companion\n\n## Overview\nGrowth GPT is a comprehensive web application designed to help students track their study sessions, compete with peers, and build confidence through gamification. The app uses OpenRouter AI (Llama 3.3 70B) to generate personalized quizzes, tracks daily streaks, and provides visual analytics of study performance.\n\n## Core Features\n1. **Authentication** - Username/password authentication\n2. **Study Session Tracking** - Users can log study sessions with topic, subject, and estimated time\n3. **AI-Generated Quizzes** - After completing a study session, users take a 5-question MCQ quiz generated by Llama 3.3 70B via OpenRouter\n4. **Performance Dashboard** - 7-day bar chart showing study time and quiz scores\n5. **Streak System** - Daily streak counter to encourage consistent study habits\n6. **Goal Setting** - Users can set daily/weekly study goals with progress tracking\n7. **Leaderboard** - Global ranking of all users by total score and current streak\n8. **Confetti Celebrations** - Visual rewards when completing goals\n\n## Tech Stack\n- **Frontend**: React + TypeScript + TailwindCSS + shadcn/ui\n- **Backend**: Express.js + TypeScript\n- **Database**: PostgreSQL (Neon) via Drizzle ORM\n- **Auth**: Replit OpenID Connect\n- **AI**: OpenRouter.ai with Llama 3.3 70B for quiz generation\n- **Charts**: Recharts for data visualization\n- **Animations**: canvas-confetti for celebrations\n\n## Database Schema\n\n### Users Table\n- id (varchar, primary key, UUID)\n- email (varchar, unique)\n- firstName (varchar)\n- lastName (varchar)\n- profileImageUrl (varchar, optional)\n- totalScore (integer, default 0)\n- currentStreak (integer, default 0)\n- createdAt, updatedAt (timestamps)\n\n### Study Sessions Table\n- id (varchar, primary key, UUID)\n- userId (foreign key → users)\n- topic (varchar)\n- subject (varchar)\n- estimatedTime (integer, in minutes)\n- completed (boolean)\n- completedAt (timestamp, optional)\n- createdAt (timestamp)\n\n### Quiz Results Table\n- id (varchar, primary key, UUID)\n- userId (foreign key → users)\n- sessionId (foreign key → study_sessions)\n- score (integer)\n- totalQuestions (integer)\n- questions (json array)\n- userAnswers (integer array)\n- createdAt (timestamp)\n\n### Goals Table\n- id (varchar, primary key, UUID)\n- userId (foreign key → users)\n- type (\"daily\" | \"weekly\")\n- targetMinutes (integer)\n- completed (boolean)\n- completedAt (timestamp, optional)\n- createdAt (timestamp)\n\n### Study Activity Table\n- id (varchar, primary key, UUID)\n- userId (foreign key → users)\n- date (date)\n- studyTime (integer, in minutes)\n- score (integer, quiz points earned that day)\n- Unique constraint on (userId, date)\n\n### Sessions Table\n- sid (varchar, primary key)\n- sess (json)\n- expire (timestamp)\n- Used by express-session for auth session management\n\n## API Endpoints\n\n### Authentication\n- `GET /api/login` - Initiate Replit Auth login\n- `GET /api/callback` - Auth callback handler\n- `GET /api/logout` - Logout and clear session\n- `GET /api/auth/user` - Get current authenticated user\n\n### Study Sessions\n- `GET /api/sessions` - Get all sessions for current user\n- `POST /api/sessions` - Create new study session\n\n### Quizzes\n- `GET /api/quiz/:sessionId` - Generate AI quiz for a session\n- `POST /api/quiz/:sessionId/submit` - Submit quiz answers and get score\n\n### Activity & Stats\n- `GET /api/activity/me` - Get current user's 7-day activity\n- `GET /api/activity/:userId` - Get specific user's 7-day activity\n- `GET /api/streak` - Get current user's streak count\n\n### Goals\n- `GET /api/goals` - Get all goals for current user\n- `POST /api/goals` - Create new goal\n- `PATCH /api/goals/:goalId/complete` - Mark goal as completed\n\n### Leaderboard\n- `GET /api/leaderboard` - Get all users ranked by total score\n- `GET /api/users/:userId` - Get specific user profile\n\n## Design System\nFollowing design_guidelines.md with inspiration from:\n- **Duolingo** - Gamification patterns (streaks, celebrations)\n- **Linear** - Minimalist UI with clean typography\n- **Notion** - Card-based layouts\n\n### Color Scheme\n- Primary: Blue (#3B82F6)\n- Secondary: Light Gray (#F1F5F9)\n- Background: White (#FFFFFF)\n- Accents: Subtle shadows and rounded corners\n\n### Key Design Principles\n- Minimal and motivating aesthetic\n- Smooth transitions and animations\n- Clear visual hierarchy\n- Responsive layout for all screen sizes\n- Loading states for all async operations\n- Error handling with toast notifications\n\n## User Flow\n\n### First-Time User\n1. Land on marketing page with hero section\n2. Click \"Get Started\" → Replit Auth login\n3. Redirected to Dashboard\n4. Set first daily/weekly goal\n5. Log first study session\n6. Take AI-generated quiz\n7. See results and updated charts\n8. Check leaderboard position\n\n### Returning User\n1. Auto-login via session cookie\n2. Dashboard shows current streak\n3. View 7-day performance chart\n4. Check progress on active goals\n5. Log new study session\n6. Complete quiz to earn points\n7. Celebrate goal completion with confetti\n8. Compete on leaderboard\n\n## Key Files\n- `shared/schema.ts` - Database schema and types\n- `server/routes.ts` - API endpoints\n- `server/storage.ts` - Database operations\n- `server/openrouter.ts` - AI quiz generation via OpenRouter API\n- `server/replitAuth.ts` - Authentication setup\n- `client/src/App.tsx` - Main app component with routing\n- `client/src/pages/dashboard.tsx` - Main dashboard page\n- `client/src/pages/leaderboard.tsx` - Leaderboard page\n- `client/src/pages/landing.tsx` - Marketing landing page\n- `client/src/components/quiz-modal.tsx` - Quiz UI component\n- `client/src/components/app-sidebar.tsx` - Navigation sidebar\n- `design_guidelines.md` - Complete design system\n\n## Recent Changes (October 24, 2025)\n- Migrated from Replit Agent to Replit environment\n- Updated AI integration from OpenAI to OpenRouter.ai with Llama 3.3 70B\n- Provisioned PostgreSQL database and pushed schema\n- Installed all required npm dependencies\n- Completed full database schema implementation\n- Set up all backend API routes with authentication\n- Built complete frontend with all pages and components\n- Configured Replit Auth for secure login\n- Implemented streak calculation algorithm\n- Added confetti animations for goal completion\n- Created responsive leaderboard with user rankings\n\n## Environment Variables\n- `DATABASE_URL` - PostgreSQL connection string (auto-configured)\n- `OPENROUTER_API_KEY` - OpenRouter API key for Llama 3.3 70B (required)\n- `SESSION_SECRET` - Express session secret (auto-configured)\n- `REPL_ID` - Replit project ID (auto-configured)\n- `REPLIT_DOMAINS` - Allowed domains for API headers (auto-configured)\n\n## User Preferences\n- Minimal, clean design aesthetic\n- Blue, white, and light gray color scheme\n- Focus on visual quality and smooth animations\n- App should feel supportive and encouraging\n","size_bytes":6832},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  index,\n  uniqueIndex,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  integer,\n  text,\n  date,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Study sessions table\nexport const studySessions = pgTable(\"study_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  topic: text(\"topic\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  estimatedTime: integer(\"estimated_time\").notNull(), // in minutes\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: timestamp(\"completed_at\"),\n  questions: jsonb(\"questions\"), // Store generated quiz questions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Quiz results table\nexport const quizResults = pgTable(\"quiz_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sessionId: varchar(\"session_id\").notNull().references(() => studySessions.id, { onDelete: \"cascade\" }),\n  score: integer(\"score\").notNull(),\n  totalQuestions: integer(\"total_questions\").notNull(),\n  questions: jsonb(\"questions\").notNull(), // Store questions, options, correct answers\n  userAnswers: jsonb(\"user_answers\").notNull(), // Store user's answers\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Goals table\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  type: varchar(\"type\").notNull(), // 'daily' or 'weekly'\n  targetDate: date(\"target_date\").notNull(),\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Study activity table for tracking daily study\nexport const studyActivity = pgTable(\"study_activity\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  date: date(\"date\").notNull(),\n  studyTime: integer(\"study_time\").notNull().default(0), // in minutes\n  score: integer(\"score\").notNull().default(0),\n}, (table) => ({\n  userDateUnique: uniqueIndex(\"user_date_unique\").on(table.userId, table.date),\n}));\n\n// Achievements table\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(), // 'milestone', 'accuracy', 'streak', 'volume', 'improvement', 'leaderboard', 'speed', 'special', 'fun'\n  rarity: varchar(\"rarity\").notNull(), // 'common', 'uncommon', 'rare', 'epic', 'legendary'\n  icon: varchar(\"icon\").notNull(), // emoji or icon name\n  condition: jsonb(\"condition\").notNull(), // { type: string, value: number, ... }\n});\n\n// User achievements table\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id, { onDelete: \"cascade\" }),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n}, (table) => ({\n  userAchievementUnique: uniqueIndex(\"user_achievement_unique\").on(table.userId, table.achievementId),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  studySessions: many(studySessions),\n  quizResults: many(quizResults),\n  goals: many(goals),\n  studyActivity: many(studyActivity),\n  userAchievements: many(userAchievements),\n}));\n\nexport const studySessionsRelations = relations(studySessions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [studySessions.userId],\n    references: [users.id],\n  }),\n  quizResults: many(quizResults),\n}));\n\nexport const quizResultsRelations = relations(quizResults, ({ one }) => ({\n  user: one(users, {\n    fields: [quizResults.userId],\n    references: [users.id],\n  }),\n  session: one(studySessions, {\n    fields: [quizResults.sessionId],\n    references: [studySessions.id],\n  }),\n}));\n\nexport const goalsRelations = relations(goals, ({ one }) => ({\n  user: one(users, {\n    fields: [goals.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const studyActivityRelations = relations(studyActivity, ({ one }) => ({\n  user: one(users, {\n    fields: [studyActivity.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, {\n    fields: [userAchievements.userId],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(50),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertStudySessionSchema = createInsertSchema(studySessions).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n  completedAt: true,\n});\n\nexport const insertQuizResultSchema = createInsertSchema(quizResults).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n  completedAt: true,\n});\n\n// TypeScript types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type StudySession = typeof studySessions.$inferSelect;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\nexport type QuizResult = typeof quizResults.$inferSelect;\nexport type InsertQuizResult = z.infer<typeof insertQuizResultSchema>;\nexport type Goal = typeof goals.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type StudyActivity = typeof studyActivity.$inferSelect;\nexport type StudySessionWithScore = StudySession & {\n  score?: number;\n  totalQuestions?: number;\n};\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type AchievementWithProgress = Achievement & {\n  unlocked: boolean;\n  unlockedAt?: Date | null;\n  progress?: number;\n  total?: number;\n};\n","size_bytes":8025},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Brain, Trophy, Target, Zap, TrendingUp, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-6 py-20\">\n        <div className=\"text-center max-w-4xl mx-auto mb-20\">\n          <div className=\"inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6\">\n            <Zap className=\"w-4 h-4\" />\n            AI-Powered Study Companion\n          </div>\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6 tracking-tight\">\n            Transform Your Study Journey with{\" \"}\n            <span className=\"text-primary\">Growth GPT</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n            Track your progress, compete with peers, and master any topic with AI-generated quizzes. \n            Your personal study companion that grows with you.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              className=\"text-lg px-8 py-6\"\n              onClick={() => window.location.href = \"/auth\"}\n              data-testid=\"button-get-started\"\n            >\n              Get Started Free\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"text-lg px-8 py-6\"\n              data-testid=\"button-learn-more\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n          <Card className=\"p-6 hover-elevate transition-all duration-200\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n              <Brain className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">AI-Generated Quizzes</h3>\n            <p className=\"text-muted-foreground\">\n              Get personalized MCQ questions based on your study topics. Master concepts through active recall.\n            </p>\n          </Card>\n\n          <Card className=\"p-6 hover-elevate transition-all duration-200\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n              <TrendingUp className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Track Your Progress</h3>\n            <p className=\"text-muted-foreground\">\n              Visualize your study time and scores with beautiful charts. See your growth over the last 7 days.\n            </p>\n          </Card>\n\n          <Card className=\"p-6 hover-elevate transition-all duration-200\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n              <Target className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Set & Achieve Goals</h3>\n            <p className=\"text-muted-foreground\">\n              Create daily and weekly study goals. Celebrate milestones with satisfying animations.\n            </p>\n          </Card>\n\n          <Card className=\"p-6 hover-elevate transition-all duration-200\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n              <Zap className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Build Study Streaks</h3>\n            <p className=\"text-muted-foreground\">\n              Maintain consistency with streak tracking. Every day counts toward your success.\n            </p>\n          </Card>\n\n          <Card className=\"p-6 hover-elevate transition-all duration-200\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n              <Trophy className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Compete & Excel</h3>\n            <p className=\"text-muted-foreground\">\n              See where you stand on the leaderboard. Friendly competition drives excellence.\n            </p>\n          </Card>\n\n          <Card className=\"p-6 hover-elevate transition-all duration-200\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n              <Users className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Community Growth</h3>\n            <p className=\"text-muted-foreground\">\n              View other students' progress and get inspired. We grow together.\n            </p>\n          </Card>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center mt-20\">\n          <Card className=\"p-12 bg-gradient-to-r from-primary/5 to-primary/10 border-primary/20\">\n            <h2 className=\"text-3xl font-bold mb-4\">Ready to Start Your Growth Journey?</h2>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Join students worldwide who are achieving their learning goals with Growth GPT.\n            </p>\n            <Button\n              size=\"lg\"\n              className=\"text-lg px-8 py-6\"\n              onClick={() => window.location.href = \"/auth\"}\n              data-testid=\"button-cta-start\"\n            >\n              Start Learning Now\n            </Button>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5694},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/progress-chart.tsx":{"content":"import { useMemo } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport type { StudyActivity } from \"@shared/schema\";\n\ninterface ProgressChartProps {\n  activity: StudyActivity[];\n}\n\nexport function ProgressChart({ activity }: ProgressChartProps) {\n  const chartData = useMemo(() => {\n    // Get last 7 days\n    const last7Days = Array.from({ length: 7 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (6 - i));\n      return date.toISOString().split(\"T\")[0];\n    });\n\n    return last7Days.map((date) => {\n      const dayActivity = activity.find((a) => a.date === date);\n      return {\n        date: new Date(date).toLocaleDateString(\"en-US\", {\n          weekday: \"short\",\n          month: \"numeric\",\n          day: \"numeric\",\n        }),\n        score: dayActivity?.score || 0,\n        studyTime: dayActivity?.studyTime || 0,\n      };\n    });\n  }, [activity]);\n\n  return (\n    <div className=\"w-full h-80\">\n      {chartData.every((d) => d.score === 0 && d.studyTime === 0) ? (\n        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n          <div className=\"text-center\">\n            <p className=\"mb-2\">No activity yet</p>\n            <p className=\"text-sm\">Complete study sessions to see your progress!</p>\n          </div>\n        </div>\n      ) : (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n            <XAxis\n              dataKey=\"date\"\n              className=\"text-xs\"\n              tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n            />\n            <YAxis\n              className=\"text-xs\"\n              tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"hsl(var(--card))\",\n                border: \"1px solid hsl(var(--border))\",\n                borderRadius: \"0.5rem\",\n              }}\n            />\n            <Legend />\n            <Bar\n              dataKey=\"score\"\n              fill=\"hsl(var(--primary))\"\n              name=\"Score\"\n              radius={[4, 4, 0, 0]}\n            />\n            <Bar\n              dataKey=\"studyTime\"\n              fill=\"hsl(var(--muted))\"\n              name=\"Study Time (min)\"\n              radius={[4, 4, 0, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      )}\n    </div>\n  );\n}\n","size_bytes":2553},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/avatars.ts":{"content":"export const defaultAvatars = [\n  '/avatars/Male_avatar_casual_style_00787740.png',\n  '/avatars/Bearded_man_avatar_df2715c1.png',\n  '/avatars/Young_man_in_hoodie_ffa0562b.png',\n  '/avatars/Man_with_spiky_hair_6027b831.png',\n  '/avatars/Man_with_fade_haircut_a0ef8d35.png',\n  '/avatars/Professional_man_in_suit_a0fba37b.png',\n  '/avatars/Man_with_tied_hair_0d4bc5bf.png',\n  '/avatars/Man_with_afro_8aee14d9.png',\n  '/avatars/Man_with_undercut_b1e80f23.png',\n];\n\nexport function getRandomAvatar(): string {\n  const randomIndex = Math.floor(Math.random() * defaultAvatars.length);\n  return defaultAvatars[randomIndex];\n}\n","size_bytes":618},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fix login authentication issue (handle both .repl.co and .replit.dev domains)\n[x] 5. Replace Replit OAuth with simple username/password authentication\n[x] 6. Request and configure OPENAI_API_KEY from user\n[x] 7. Verify application runs successfully with all dependencies\n[x] 8. Fix text visibility in dialog boxes while maintaining dark theme\n[x] 9. Configure OpenRouter API with Llama 3.3 70B model for quiz generation\n[x] 10. Request and configure OPENROUTER_API_KEY from user\n[x] 11. Improve quiz generation to create diverse multiple choice options (4 varied options per question)\n[x] 12. Application fully configured and running successfully\n[x] 13. Generate diverse profile avatars for users\n[x] 14. Implement random avatar assignment for new user registrations\n[x] 15. Update existing users with profile images\n[x] 16. Remove all female avatars per user request\n[x] 17. Generate 8 new diverse male avatars with different styles\n[x] 18. Update avatar system with 9 total male avatars\n[x] 19. Update database to reassign new avatars to all users\n[x] 20. Remove OpenAI npm package and use direct OpenRouter API calls instead\n[x] 21. Fix quiz scoring by storing questions with session instead of regenerating them\n[x] 22. Configure OPENROUTER_API_KEY environment variable\n[x] 23. Verify application is running successfully with OpenRouter integration\n[x] 24. Complete project import and migration\n[x] 25. Verify workflow is running successfully on port 5000\n[x] 26. Project successfully migrated and ready for use\n[x] 27. Make firstName and lastName required fields in registration\n[x] 28. Add profile image change functionality with avatar selection dialog\n[x] 29. Fix avatar update API to properly update session and return JSON response\n[x] 30. Configure workflow with correct output type (webview) and port 5000\n[x] 31. Verify OPENROUTER_API_KEY is properly configured in environment\n[x] 32. Confirm application is running successfully with all dependencies\n[x] 33. Project import and migration fully completed - ready for use\n[x] 34. Add quiz score display on completed study sessions\n[x] 35. Implement efficient database queries to fetch sessions with scores (fixed N+1 pattern)\n[x] 36. Ensure full type safety with StudySessionWithScore type throughout the stack\n[x] 37. Verify OPENROUTER_API_KEY is properly added to Replit Secrets\n[x] 38. Successfully restart workflow with API key configured\n[x] 39. All tasks completed - application ready for use\n[x] 40. Final verification - Application running successfully on port 5000 with webview output\n[x] 41. All import tasks completed and verified\n[x] 42. Deleted all user data from database (1 user + all related records)\n[x] 43. Added animated gradient background with floating orb effects\n[x] 44. Fixed animated background to display on all pages (landing, dashboard, leaderboard)\n[x] 45. Generated and added professional designer-quality favicon icon\n[x] 46. Configured workflow with webview output type and port 5000\n[x] 47. Verified application is running successfully\n[x] 48. Project import and migration fully completed - ready for production use\n[x] 49. Implemented comprehensive achievements system (38 achievements across 9 categories)\n[x] 50. Added achievements database tables (achievements and user_achievements)\n[x] 51. Created achievement definitions with rarity tiers (common, uncommon, rare, epic, legendary)\n[x] 52. Implemented achievement checking service that runs after quiz completion\n[x] 53. Added backend API routes for achievements (/api/achievements, /api/achievements/me)\n[x] 54. Created achievements page with badge display, progress tracking, and category filters\n[x] 55. Implemented achievement unlock notifications with confetti animations\n[x] 56. Added achievement stats counter to dashboard sidebar\n[x] 57. Integrated achievements into navigation sidebar\n[x] 58. All achievement features fully implemented and operational\n[x] 59. Configured workflow with proper webview output type and port 5000\n[x] 60. Verified application is running successfully - ready for production use\n[x] 61. Project import and migration fully completed\n[x] 62. Connected application to database using DATABASE_URL secret from Replit Secrets\n[x] 63. Pushed database schema to create all tables (sessions, users, study_sessions, quiz_results, goals, study_activity, achievements, user_achievements)\n[x] 64. Verified database connection is working properly\n[x] 65. Application successfully connected to production database - ready for use\n[x] 66. Seeded 38 achievement definitions into the database\n[x] 67. Verified all database tables are properly populated and working\n[x] 68. Expanded achievements system from 38 to 100 total achievements\n[x] 69. Added achievements across all categories: Milestone (18), Volume (18), Accuracy (12), Streak (11), Fun (10), Leaderboard (9), Special (8), Improvement (7), Speed (7)\n[x] 70. Added rarities distribution: Common (19), Uncommon (31), Rare (24), Epic (16), Legendary (10)\n[x] 71. Re-seeded database with all 100 achievements successfully","size_bytes":5212},"server/openrouter.ts":{"content":"interface MCQQuestion {\n  question: string;\n  options: string[];\n  correctAnswer: number;\n}\n\nexport async function generateMCQQuestions(topic: string, subject: string): Promise<MCQQuestion[]> {\n  try {\n    const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\n        \"HTTP-Referer\": process.env.REPLIT_DOMAINS || \"http://localhost:5000\",\n        \"X-Title\": \"Growth GPT\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"meta-llama/llama-3.3-70b-instruct:free\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert educator creating multiple choice questions for students. Generate exactly 5 questions about the given topic. Each question should have 4 answer options (A, B, C, D) with only ONE correct answer. The wrong answers should be plausible but clearly incorrect. Format your response exactly like this:\n\n1. Q: What is the capital of France?\n   A: London\n   B: Paris\n   C: Berlin\n   D: Madrid\n   CORRECT: B\n\n2. Q: What gas do plants absorb during photosynthesis?\n   A: Oxygen\n   B: Nitrogen\n   C: Carbon Dioxide\n   D: Hydrogen\n   CORRECT: C`,\n          },\n          {\n            role: \"user\",\n            content: `Create 5 multiple choice questions about \"${topic}\" in the subject of ${subject}. Make them educational, clear, and appropriate for students. Each question must have 4 different answer options with only one correct answer.`,\n          },\n        ],\n        max_tokens: 1024,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenRouter API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const content = data.choices[0]?.message?.content || \"\";\n    \n    const questions = parseQuestionsFromText(content, topic);\n    \n    if (questions.length === 0) {\n      throw new Error(\"No questions were generated\");\n    }\n\n    return questions;\n  } catch (error: any) {\n    console.error(\"Error generating MCQ questions:\", error);\n    throw new Error(\"Failed to generate quiz questions: \" + error.message);\n  }\n}\n\nfunction parseQuestionsFromText(text: string, topic: string): MCQQuestion[] {\n  const questions: MCQQuestion[] = [];\n  \n  const lines = text.split('\\n');\n  let currentQuestion = '';\n  let currentOptions: string[] = [];\n  let correctAnswer = -1;\n  \n  for (const line of lines) {\n    const trimmed = line.trim();\n    \n    if (trimmed.match(/^\\d+\\.\\s*Q:/i) || trimmed.startsWith('Q:')) {\n      if (currentQuestion && currentOptions.length === 4 && correctAnswer >= 0) {\n        questions.push({\n          question: currentQuestion,\n          options: currentOptions,\n          correctAnswer: correctAnswer,\n        });\n      }\n      currentQuestion = trimmed.replace(/^\\d+\\.\\s*Q:\\s*/i, '').replace(/^Q:\\s*/i, '').trim();\n      currentOptions = [];\n      correctAnswer = -1;\n    }\n    else if (trimmed.match(/^[A-D]:/i)) {\n      const optionText = trimmed.replace(/^[A-D]:\\s*/i, '').trim();\n      currentOptions.push(optionText);\n    }\n    else if (trimmed.match(/^CORRECT:\\s*[A-D]/i)) {\n      const correctLetter = trimmed.replace(/^CORRECT:\\s*/i, '').trim().toUpperCase();\n      correctAnswer = correctLetter.charCodeAt(0) - 'A'.charCodeAt(0);\n    }\n  }\n  \n  if (currentQuestion && currentOptions.length === 4 && correctAnswer >= 0) {\n    questions.push({\n      question: currentQuestion,\n      options: currentOptions,\n      correctAnswer: correctAnswer,\n    });\n  }\n  \n  if (questions.length === 0) {\n    return createFallbackQuestions(topic);\n  }\n  \n  return questions.slice(0, 5);\n}\n\nfunction createFallbackQuestions(topic: string): MCQQuestion[] {\n  return [\n    {\n      question: `What is the primary focus when studying ${topic}?`,\n      options: ['Understanding core concepts and principles', 'Memorizing dates only', 'Learning unrelated subjects', 'Ignoring practical applications'],\n      correctAnswer: 0,\n    },\n    {\n      question: `Why is learning about ${topic} important?`,\n      options: ['It builds foundational knowledge', 'It has no practical use', 'It only matters for tests', 'It should be avoided'],\n      correctAnswer: 0,\n    },\n    {\n      question: `What approach is best for mastering ${topic}?`,\n      options: ['Regular practice and review', 'Cramming before exams', 'Avoiding difficult concepts', 'Skipping fundamentals'],\n      correctAnswer: 0,\n    },\n  ];\n}\n","size_bytes":4500},"client/src/components/change-avatar-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { defaultAvatars } from \"@shared/avatars\";\nimport { Check } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface ChangeAvatarDialogProps {\n  open: boolean;\n  onClose: () => void;\n  currentUser: User;\n}\n\nexport function ChangeAvatarDialog({ open, onClose, currentUser }: ChangeAvatarDialogProps) {\n  const { toast } = useToast();\n  const [selectedAvatar, setSelectedAvatar] = useState(currentUser.profileImageUrl || defaultAvatars[0]);\n\n  const updateAvatarMutation = useMutation({\n    mutationFn: async (avatarUrl: string) => {\n      const res = await apiRequest(\"PATCH\", \"/api/user/avatar\", { profileImageUrl: avatarUrl });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Your profile image has been updated.\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update profile image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateAvatarMutation.mutate(selectedAvatar);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"dialog-change-avatar\">\n        <DialogHeader>\n          <DialogTitle>Change Profile Image</DialogTitle>\n          <DialogDescription>\n            Select an avatar from the options below\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-3 gap-4 py-4\">\n          {defaultAvatars.map((avatarUrl, index) => (\n            <button\n              key={index}\n              onClick={() => setSelectedAvatar(avatarUrl)}\n              className={`relative p-2 rounded-lg border-2 transition-all hover:border-primary/50 ${\n                selectedAvatar === avatarUrl\n                  ? \"border-primary bg-primary/5\"\n                  : \"border-border\"\n              }`}\n              data-testid={`avatar-option-${index}`}\n            >\n              <Avatar className=\"w-full h-auto aspect-square\">\n                <AvatarImage\n                  src={avatarUrl}\n                  alt={`Avatar ${index + 1}`}\n                  className=\"object-cover\"\n                />\n                <AvatarFallback>A{index + 1}</AvatarFallback>\n              </Avatar>\n              {selectedAvatar === avatarUrl && (\n                <div className=\"absolute top-1 right-1 bg-primary text-primary-foreground rounded-full p-1\">\n                  <Check className=\"w-3 h-3\" />\n                </div>\n              )}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex gap-2 justify-end\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={updateAvatarMutation.isPending}\n            data-testid=\"button-cancel-avatar\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={updateAvatarMutation.isPending}\n            data-testid=\"button-save-avatar\"\n          >\n            {updateAvatarMutation.isPending ? \"Saving...\" : \"Save\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3748},"shared/avatars.ts":{"content":"export const defaultAvatars = [\n  '/avatars/Male_avatar_casual_style_00787740.png',\n  '/avatars/Bearded_man_avatar_df2715c1.png',\n  '/avatars/Young_man_in_hoodie_ffa0562b.png',\n  '/avatars/Man_with_spiky_hair_6027b831.png',\n  '/avatars/Man_with_fade_haircut_a0ef8d35.png',\n  '/avatars/Professional_man_in_suit_a0fba37b.png',\n  '/avatars/Man_with_tied_hair_0d4bc5bf.png',\n  '/avatars/Man_with_afro_8aee14d9.png',\n  '/avatars/Man_with_undercut_b1e80f23.png',\n];\n\nexport function getRandomAvatar(): string {\n  const randomIndex = Math.floor(Math.random() * defaultAvatars.length);\n  return defaultAvatars[randomIndex];\n}\n","size_bytes":618},"server/achievements.ts":{"content":"import { Achievement } from \"@shared/schema\";\n\nexport type AchievementCondition = \n  | { type: \"quizzes_completed\", value: number }\n  | { type: \"perfect_score\", value: number }\n  | { type: \"consecutive_perfect\", value: number }\n  | { type: \"accuracy_average\", value: number, over: number }\n  | { type: \"accuracy_with_score\", accuracy: number, minScore: number }\n  | { type: \"questions_answered\", value: number }\n  | { type: \"quizzes_in_day\", value: number }\n  | { type: \"different_topics\", value: number }\n  | { type: \"questions_in_topic\", value: number, topic: string }\n  | { type: \"streak_days\", value: number }\n  | { type: \"study_time\", value: number }\n  | { type: \"leaderboard_position\", value: number }\n  | { type: \"leaderboard_rank_one\", value: boolean }\n  | { type: \"users_beaten\", value: number }\n  | { type: \"quiz_time\", maxTime: number, minQuestions: number, minAccuracy: number }\n  | { type: \"improvement\", value: number }\n  | { type: \"exact_score\", value: number }\n  | { type: \"study_hour\", hour: number, days: number };\n\nexport const ACHIEVEMENT_DEFINITIONS: Omit<Achievement, never>[] = [\n  // STUDY MILESTONES - Common to Rare\n  {\n    id: \"first_steps\",\n    name: \"First Steps\",\n    description: \"Complete your first quiz\",\n    category: \"milestone\",\n    rarity: \"common\",\n    icon: \"🎯\",\n    condition: { type: \"quizzes_completed\", value: 1 },\n  },\n  {\n    id: \"getting_started\",\n    name: \"Getting Started\",\n    description: \"Complete 10 quizzes\",\n    category: \"milestone\",\n    rarity: \"common\",\n    icon: \"📚\",\n    condition: { type: \"quizzes_completed\", value: 10 },\n  },\n  {\n    id: \"dedicated_learner\",\n    name: \"Dedicated Learner\",\n    description: \"Complete 50 quizzes\",\n    category: \"milestone\",\n    rarity: \"uncommon\",\n    icon: \"📖\",\n    condition: { type: \"quizzes_completed\", value: 50 },\n  },\n  {\n    id: \"study_master\",\n    name: \"Study Master\",\n    description: \"Complete 100 quizzes\",\n    category: \"milestone\",\n    rarity: \"rare\",\n    icon: \"🎓\",\n    condition: { type: \"quizzes_completed\", value: 100 },\n  },\n  {\n    id: \"legend\",\n    name: \"Legend\",\n    description: \"Complete 500 quizzes\",\n    category: \"milestone\",\n    rarity: \"legendary\",\n    icon: \"👑\",\n    condition: { type: \"quizzes_completed\", value: 500 },\n  },\n  {\n    id: \"topic_explorer\",\n    name: \"Topic Explorer\",\n    description: \"Study 5 different topics\",\n    category: \"milestone\",\n    rarity: \"common\",\n    icon: \"🗺️\",\n    condition: { type: \"different_topics\", value: 5 },\n  },\n  {\n    id: \"renaissance_mind\",\n    name: \"Renaissance Mind\",\n    description: \"Study 20 different topics\",\n    category: \"milestone\",\n    rarity: \"epic\",\n    icon: \"🧠\",\n    condition: { type: \"different_topics\", value: 20 },\n  },\n\n  // ACCURACY & PERFORMANCE - Common to Legendary\n  {\n    id: \"perfect_score\",\n    name: \"Perfect Score\",\n    description: \"Get 100% on any quiz\",\n    category: \"accuracy\",\n    rarity: \"common\",\n    icon: \"⭐\",\n    condition: { type: \"perfect_score\", value: 1 },\n  },\n  {\n    id: \"perfectionist\",\n    name: \"Perfectionist\",\n    description: \"Get 100% on 5 quizzes\",\n    category: \"accuracy\",\n    rarity: \"uncommon\",\n    icon: \"💫\",\n    condition: { type: \"perfect_score\", value: 5 },\n  },\n  {\n    id: \"flawless\",\n    name: \"Flawless\",\n    description: \"Get 100% on 10 consecutive quizzes\",\n    category: \"accuracy\",\n    rarity: \"epic\",\n    icon: \"💎\",\n    condition: { type: \"consecutive_perfect\", value: 10 },\n  },\n  {\n    id: \"sharp_mind\",\n    name: \"Sharp Mind\",\n    description: \"Maintain 90%+ average over 20 quizzes\",\n    category: \"accuracy\",\n    rarity: \"rare\",\n    icon: \"🧩\",\n    condition: { type: \"accuracy_average\", value: 90, over: 20 },\n  },\n  {\n    id: \"genius\",\n    name: \"Genius\",\n    description: \"Score 95%+ on a 20-question quiz\",\n    category: \"accuracy\",\n    rarity: \"rare\",\n    icon: \"🌟\",\n    condition: { type: \"accuracy_with_score\", accuracy: 95, minScore: 19 },\n  },\n  {\n    id: \"quick_thinker\",\n    name: \"Quick Thinker\",\n    description: \"Complete quiz in under 2 minutes with 90%+\",\n    category: \"speed\",\n    rarity: \"uncommon\",\n    icon: \"⚡\",\n    condition: { type: \"quiz_time\", maxTime: 120, minQuestions: 10, minAccuracy: 90 },\n  },\n\n  // STREAKS & CONSISTENCY - Uncommon to Legendary\n  {\n    id: \"week_warrior\",\n    name: \"Week Warrior\",\n    description: \"7-day study streak\",\n    category: \"streak\",\n    rarity: \"uncommon\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 7 },\n  },\n  {\n    id: \"month_master\",\n    name: \"Month Master\",\n    description: \"30-day study streak\",\n    category: \"streak\",\n    rarity: \"rare\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 30 },\n  },\n  {\n    id: \"unstoppable\",\n    name: \"Unstoppable\",\n    description: \"100-day study streak\",\n    category: \"streak\",\n    rarity: \"epic\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 100 },\n  },\n  {\n    id: \"golden_streak\",\n    name: \"Golden Streak\",\n    description: \"Never miss a day for 365 days\",\n    category: \"streak\",\n    rarity: \"legendary\",\n    icon: \"🏆\",\n    condition: { type: \"streak_days\", value: 365 },\n  },\n  {\n    id: \"morning_scholar\",\n    name: \"Morning Scholar\",\n    description: \"Study 7 days in a row before 9am\",\n    category: \"streak\",\n    rarity: \"rare\",\n    icon: \"🌅\",\n    condition: { type: \"study_hour\", hour: 9, days: 7 },\n  },\n  {\n    id: \"night_owl\",\n    name: \"Night Owl\",\n    description: \"Study 7 days in a row after 10pm\",\n    category: \"streak\",\n    rarity: \"rare\",\n    icon: \"🦉\",\n    condition: { type: \"study_hour\", hour: 22, days: 7 },\n  },\n\n  // VOLUME & DEDICATION - Common to Epic\n  {\n    id: \"question_crusher\",\n    name: \"Question Crusher\",\n    description: \"Answer 100 questions\",\n    category: \"volume\",\n    rarity: \"common\",\n    icon: \"💪\",\n    condition: { type: \"questions_answered\", value: 100 },\n  },\n  {\n    id: \"answer_machine\",\n    name: \"Answer Machine\",\n    description: \"Answer 1,000 questions\",\n    category: \"volume\",\n    rarity: \"rare\",\n    icon: \"🤖\",\n    condition: { type: \"questions_answered\", value: 1000 },\n  },\n  {\n    id: \"quiz_marathon\",\n    name: \"Quiz Marathon\",\n    description: \"Complete 10 quizzes in one day\",\n    category: \"volume\",\n    rarity: \"uncommon\",\n    icon: \"🏃\",\n    condition: { type: \"quizzes_in_day\", value: 10 },\n  },\n  {\n    id: \"study_session\",\n    name: \"Study Session\",\n    description: \"Study for 30 minutes straight\",\n    category: \"volume\",\n    rarity: \"common\",\n    icon: \"⏰\",\n    condition: { type: \"study_time\", value: 30 },\n  },\n  {\n    id: \"deep_dive\",\n    name: \"Deep Dive\",\n    description: \"Complete 50 questions on single topic\",\n    category: \"volume\",\n    rarity: \"uncommon\",\n    icon: \"🏊\",\n    condition: { type: \"questions_in_topic\", value: 50, topic: \"any\" },\n  },\n\n  // IMPROVEMENT & GROWTH - Uncommon to Rare\n  {\n    id: \"rising_star\",\n    name: \"Rising Star\",\n    description: \"Improve score by 20% on same topic\",\n    category: \"improvement\",\n    rarity: \"uncommon\",\n    icon: \"📈\",\n    condition: { type: \"improvement\", value: 20 },\n  },\n  {\n    id: \"comeback_kid\",\n    name: \"Comeback Kid\",\n    description: \"Score 90%+ after getting below 50%\",\n    category: \"improvement\",\n    rarity: \"uncommon\",\n    icon: \"🎯\",\n    condition: { type: \"improvement\", value: 40 },\n  },\n  {\n    id: \"mastery\",\n    name: \"Mastery\",\n    description: \"Go from 60% to 95%+ on a topic\",\n    category: \"improvement\",\n    rarity: \"rare\",\n    icon: \"🏅\",\n    condition: { type: \"improvement\", value: 35 },\n  },\n\n  // LEADERBOARD & SOCIAL - Uncommon to Epic\n  {\n    id: \"top_ten\",\n    name: \"Top 10\",\n    description: \"Reach top 10 on leaderboard\",\n    category: \"leaderboard\",\n    rarity: \"uncommon\",\n    icon: \"🥉\",\n    condition: { type: \"leaderboard_position\", value: 10 },\n  },\n  {\n    id: \"top_five\",\n    name: \"Top 5\",\n    description: \"Reach top 5 on leaderboard\",\n    category: \"leaderboard\",\n    rarity: \"rare\",\n    icon: \"🥈\",\n    condition: { type: \"leaderboard_position\", value: 5 },\n  },\n  {\n    id: \"number_one\",\n    name: \"#1 Spot\",\n    description: \"Reach #1 on leaderboard\",\n    category: \"leaderboard\",\n    rarity: \"epic\",\n    icon: \"🥇\",\n    condition: { type: \"leaderboard_rank_one\", value: true },\n  },\n  {\n    id: \"competitive\",\n    name: \"Competitive\",\n    description: \"Beat 10 different users' scores\",\n    category: \"leaderboard\",\n    rarity: \"uncommon\",\n    icon: \"⚔️\",\n    condition: { type: \"users_beaten\", value: 10 },\n  },\n\n  // SPEED - Common to Rare\n  {\n    id: \"lightning_fast\",\n    name: \"Lightning Fast\",\n    description: \"Complete 10-question quiz in under 60 seconds\",\n    category: \"speed\",\n    rarity: \"uncommon\",\n    icon: \"⚡\",\n    condition: { type: \"quiz_time\", maxTime: 60, minQuestions: 10, minAccuracy: 70 },\n  },\n  {\n    id: \"speed_demon\",\n    name: \"Speed Demon\",\n    description: \"Answer 100 questions in under 10 minutes\",\n    category: \"speed\",\n    rarity: \"rare\",\n    icon: \"🏎️\",\n    condition: { type: \"quiz_time\", maxTime: 600, minQuestions: 100, minAccuracy: 75 },\n  },\n\n  // FUN & QUIRKY - Common to Rare\n  {\n    id: \"lucky_sevens\",\n    name: \"Lucky Number Seven\",\n    description: \"Score exactly 77%\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"🎰\",\n    condition: { type: \"exact_score\", value: 77 },\n  },\n  {\n    id: \"perfectionist_100\",\n    name: \"Century\",\n    description: \"Score exactly 100 points\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"💯\",\n    condition: { type: \"exact_score\", value: 100 },\n  },\n  {\n    id: \"midnight_scholar\",\n    name: \"Midnight Scholar\",\n    description: \"Complete quiz at exactly midnight\",\n    category: \"fun\",\n    rarity: \"rare\",\n    icon: \"🌙\",\n    condition: { type: \"study_hour\", hour: 0, days: 1 },\n  },\n\n  // SPECIAL - Epic to Legendary\n  {\n    id: \"early_adopter\",\n    name: \"Early Adopter\",\n    description: \"One of the first 100 users\",\n    category: \"special\",\n    rarity: \"epic\",\n    icon: \"🌱\",\n    condition: { type: \"quizzes_completed\", value: 1 },\n  },\n  {\n    id: \"perfect_week\",\n    name: \"Perfect Week\",\n    description: \"100% accuracy on all quizzes for 7 days\",\n    category: \"special\",\n    rarity: \"legendary\",\n    icon: \"✨\",\n    condition: { type: \"consecutive_perfect\", value: 50 },\n  },\n\n  // ADDITIONAL MILESTONES\n  {\n    id: \"milestone_5\",\n    name: \"Starter Pack\",\n    description: \"Complete 5 quizzes\",\n    category: \"milestone\",\n    rarity: \"common\",\n    icon: \"🎪\",\n    condition: { type: \"quizzes_completed\", value: 5 },\n  },\n  {\n    id: \"milestone_25\",\n    name: \"Quarter Century\",\n    description: \"Complete 25 quizzes\",\n    category: \"milestone\",\n    rarity: \"common\",\n    icon: \"🎨\",\n    condition: { type: \"quizzes_completed\", value: 25 },\n  },\n  {\n    id: \"milestone_75\",\n    name: \"Advanced Scholar\",\n    description: \"Complete 75 quizzes\",\n    category: \"milestone\",\n    rarity: \"uncommon\",\n    icon: \"🎭\",\n    condition: { type: \"quizzes_completed\", value: 75 },\n  },\n  {\n    id: \"milestone_200\",\n    name: \"Quiz Veteran\",\n    description: \"Complete 200 quizzes\",\n    category: \"milestone\",\n    rarity: \"rare\",\n    icon: \"🎖️\",\n    condition: { type: \"quizzes_completed\", value: 200 },\n  },\n  {\n    id: \"milestone_300\",\n    name: \"Elite Learner\",\n    description: \"Complete 300 quizzes\",\n    category: \"milestone\",\n    rarity: \"epic\",\n    icon: \"👨‍🎓\",\n    condition: { type: \"quizzes_completed\", value: 300 },\n  },\n  {\n    id: \"milestone_1000\",\n    name: \"Quiz Legend\",\n    description: \"Complete 1,000 quizzes\",\n    category: \"milestone\",\n    rarity: \"legendary\",\n    icon: \"🦸\",\n    condition: { type: \"quizzes_completed\", value: 1000 },\n  },\n  {\n    id: \"topic_3\",\n    name: \"Curious Mind\",\n    description: \"Study 3 different topics\",\n    category: \"milestone\",\n    rarity: \"common\",\n    icon: \"🔍\",\n    condition: { type: \"different_topics\", value: 3 },\n  },\n  {\n    id: \"topic_10\",\n    name: \"Knowledge Seeker\",\n    description: \"Study 10 different topics\",\n    category: \"milestone\",\n    rarity: \"uncommon\",\n    icon: \"🎯\",\n    condition: { type: \"different_topics\", value: 10 },\n  },\n  {\n    id: \"topic_15\",\n    name: \"Polymath\",\n    description: \"Study 15 different topics\",\n    category: \"milestone\",\n    rarity: \"rare\",\n    icon: \"🌐\",\n    condition: { type: \"different_topics\", value: 15 },\n  },\n  {\n    id: \"topic_30\",\n    name: \"Universal Scholar\",\n    description: \"Study 30 different topics\",\n    category: \"milestone\",\n    rarity: \"legendary\",\n    icon: \"🌌\",\n    condition: { type: \"different_topics\", value: 30 },\n  },\n\n  // ADDITIONAL ACCURACY ACHIEVEMENTS\n  {\n    id: \"accurate_10\",\n    name: \"Good Start\",\n    description: \"Get 80%+ on 10 quizzes\",\n    category: \"accuracy\",\n    rarity: \"common\",\n    icon: \"🎯\",\n    condition: { type: \"accuracy_average\", value: 80, over: 10 },\n  },\n  {\n    id: \"accurate_50\",\n    name: \"Consistent Performer\",\n    description: \"Get 85%+ average over 50 quizzes\",\n    category: \"accuracy\",\n    rarity: \"uncommon\",\n    icon: \"🎪\",\n    condition: { type: \"accuracy_average\", value: 85, over: 50 },\n  },\n  {\n    id: \"perfect_10\",\n    name: \"Perfect Ten\",\n    description: \"Get 100% on 10 quizzes\",\n    category: \"accuracy\",\n    rarity: \"rare\",\n    icon: \"🌟\",\n    condition: { type: \"perfect_score\", value: 10 },\n  },\n  {\n    id: \"perfect_25\",\n    name: \"Perfection Master\",\n    description: \"Get 100% on 25 quizzes\",\n    category: \"accuracy\",\n    rarity: \"epic\",\n    icon: \"💠\",\n    condition: { type: \"perfect_score\", value: 25 },\n  },\n  {\n    id: \"perfect_50\",\n    name: \"Flawless Champion\",\n    description: \"Get 100% on 50 quizzes\",\n    category: \"accuracy\",\n    rarity: \"legendary\",\n    icon: \"💫\",\n    condition: { type: \"perfect_score\", value: 50 },\n  },\n  {\n    id: \"consecutive_3\",\n    name: \"Hat Trick\",\n    description: \"Get 100% on 3 consecutive quizzes\",\n    category: \"accuracy\",\n    rarity: \"common\",\n    icon: \"🎩\",\n    condition: { type: \"consecutive_perfect\", value: 3 },\n  },\n  {\n    id: \"consecutive_5\",\n    name: \"Perfect Streak\",\n    description: \"Get 100% on 5 consecutive quizzes\",\n    category: \"accuracy\",\n    rarity: \"uncommon\",\n    icon: \"✨\",\n    condition: { type: \"consecutive_perfect\", value: 5 },\n  },\n\n  // ADDITIONAL STREAK ACHIEVEMENTS\n  {\n    id: \"streak_3\",\n    name: \"Starting Strong\",\n    description: \"3-day study streak\",\n    category: \"streak\",\n    rarity: \"common\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 3 },\n  },\n  {\n    id: \"streak_14\",\n    name: \"Two Weeks\",\n    description: \"14-day study streak\",\n    category: \"streak\",\n    rarity: \"uncommon\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 14 },\n  },\n  {\n    id: \"streak_60\",\n    name: \"Two Months\",\n    description: \"60-day study streak\",\n    category: \"streak\",\n    rarity: \"rare\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 60 },\n  },\n  {\n    id: \"streak_180\",\n    name: \"Half Year Hero\",\n    description: \"180-day study streak\",\n    category: \"streak\",\n    rarity: \"epic\",\n    icon: \"🔥\",\n    condition: { type: \"streak_days\", value: 180 },\n  },\n  {\n    id: \"weekend_warrior\",\n    name: \"Weekend Warrior\",\n    description: \"Study every weekend for a month\",\n    category: \"streak\",\n    rarity: \"uncommon\",\n    icon: \"⚔️\",\n    condition: { type: \"streak_days\", value: 4 },\n  },\n\n  // ADDITIONAL VOLUME ACHIEVEMENTS\n  {\n    id: \"questions_50\",\n    name: \"Question Starter\",\n    description: \"Answer 50 questions\",\n    category: \"volume\",\n    rarity: \"common\",\n    icon: \"📝\",\n    condition: { type: \"questions_answered\", value: 50 },\n  },\n  {\n    id: \"questions_250\",\n    name: \"Answer Pro\",\n    description: \"Answer 250 questions\",\n    category: \"volume\",\n    rarity: \"uncommon\",\n    icon: \"📋\",\n    condition: { type: \"questions_answered\", value: 250 },\n  },\n  {\n    id: \"questions_500\",\n    name: \"Question Expert\",\n    description: \"Answer 500 questions\",\n    category: \"volume\",\n    rarity: \"uncommon\",\n    icon: \"📊\",\n    condition: { type: \"questions_answered\", value: 500 },\n  },\n  {\n    id: \"questions_2500\",\n    name: \"Answer Champion\",\n    description: \"Answer 2,500 questions\",\n    category: \"volume\",\n    rarity: \"rare\",\n    icon: \"🏆\",\n    condition: { type: \"questions_answered\", value: 2500 },\n  },\n  {\n    id: \"questions_5000\",\n    name: \"Knowledge Powerhouse\",\n    description: \"Answer 5,000 questions\",\n    category: \"volume\",\n    rarity: \"epic\",\n    icon: \"⚡\",\n    condition: { type: \"questions_answered\", value: 5000 },\n  },\n  {\n    id: \"daily_5\",\n    name: \"Daily Driver\",\n    description: \"Complete 5 quizzes in one day\",\n    category: \"volume\",\n    rarity: \"common\",\n    icon: \"🚗\",\n    condition: { type: \"quizzes_in_day\", value: 5 },\n  },\n  {\n    id: \"daily_15\",\n    name: \"Quiz Grinder\",\n    description: \"Complete 15 quizzes in one day\",\n    category: \"volume\",\n    rarity: \"rare\",\n    icon: \"⚙️\",\n    condition: { type: \"quizzes_in_day\", value: 15 },\n  },\n  {\n    id: \"daily_20\",\n    name: \"Beast Mode\",\n    description: \"Complete 20 quizzes in one day\",\n    category: \"volume\",\n    rarity: \"epic\",\n    icon: \"🦁\",\n    condition: { type: \"quizzes_in_day\", value: 20 },\n  },\n  {\n    id: \"study_60\",\n    name: \"Hour of Power\",\n    description: \"Study for 60 minutes\",\n    category: \"volume\",\n    rarity: \"uncommon\",\n    icon: \"⏰\",\n    condition: { type: \"study_time\", value: 60 },\n  },\n  {\n    id: \"study_120\",\n    name: \"Study Beast\",\n    description: \"Study for 120 minutes\",\n    category: \"volume\",\n    rarity: \"rare\",\n    icon: \"🦾\",\n    condition: { type: \"study_time\", value: 120 },\n  },\n  {\n    id: \"study_300\",\n    name: \"Marathon Learner\",\n    description: \"Study for 5 hours straight\",\n    category: \"volume\",\n    rarity: \"epic\",\n    icon: \"🏃‍♂️\",\n    condition: { type: \"study_time\", value: 300 },\n  },\n\n  // ADDITIONAL IMPROVEMENT ACHIEVEMENTS\n  {\n    id: \"improvement_10\",\n    name: \"Getting Better\",\n    description: \"Improve score by 10% on same topic\",\n    category: \"improvement\",\n    rarity: \"common\",\n    icon: \"📈\",\n    condition: { type: \"improvement\", value: 10 },\n  },\n  {\n    id: \"improvement_30\",\n    name: \"Major Progress\",\n    description: \"Improve score by 30% on same topic\",\n    category: \"improvement\",\n    rarity: \"uncommon\",\n    icon: \"🚀\",\n    condition: { type: \"improvement\", value: 30 },\n  },\n  {\n    id: \"improvement_50\",\n    name: \"Transformation\",\n    description: \"Improve score by 50% on same topic\",\n    category: \"improvement\",\n    rarity: \"rare\",\n    icon: \"🌱\",\n    condition: { type: \"improvement\", value: 50 },\n  },\n  {\n    id: \"from_zero_hero\",\n    name: \"From Zero to Hero\",\n    description: \"Go from 0% to 100% on a topic\",\n    category: \"improvement\",\n    rarity: \"epic\",\n    icon: \"🦸‍♂️\",\n    condition: { type: \"improvement\", value: 100 },\n  },\n\n  // ADDITIONAL LEADERBOARD ACHIEVEMENTS\n  {\n    id: \"top_25\",\n    name: \"Top 25\",\n    description: \"Reach top 25 on leaderboard\",\n    category: \"leaderboard\",\n    rarity: \"common\",\n    icon: \"🏅\",\n    condition: { type: \"leaderboard_position\", value: 25 },\n  },\n  {\n    id: \"top_3\",\n    name: \"Podium Finish\",\n    description: \"Reach top 3 on leaderboard\",\n    category: \"leaderboard\",\n    rarity: \"rare\",\n    icon: \"🥉\",\n    condition: { type: \"leaderboard_position\", value: 3 },\n  },\n  {\n    id: \"users_5\",\n    name: \"Beginner Competitor\",\n    description: \"Beat 5 different users' scores\",\n    category: \"leaderboard\",\n    rarity: \"common\",\n    icon: \"⚔️\",\n    condition: { type: \"users_beaten\", value: 5 },\n  },\n  {\n    id: \"users_25\",\n    name: \"Rival Crusher\",\n    description: \"Beat 25 different users' scores\",\n    category: \"leaderboard\",\n    rarity: \"rare\",\n    icon: \"🗡️\",\n    condition: { type: \"users_beaten\", value: 25 },\n  },\n  {\n    id: \"users_50\",\n    name: \"Leaderboard Dominator\",\n    description: \"Beat 50 different users' scores\",\n    category: \"leaderboard\",\n    rarity: \"epic\",\n    icon: \"👊\",\n    condition: { type: \"users_beaten\", value: 50 },\n  },\n\n  // ADDITIONAL SPEED ACHIEVEMENTS\n  {\n    id: \"speed_5min\",\n    name: \"Quick Quiz\",\n    description: \"Complete quiz in under 5 minutes with 80%+\",\n    category: \"speed\",\n    rarity: \"common\",\n    icon: \"💨\",\n    condition: { type: \"quiz_time\", maxTime: 300, minQuestions: 10, minAccuracy: 80 },\n  },\n  {\n    id: \"speed_3min\",\n    name: \"Rapid Fire\",\n    description: \"Complete 15-question quiz in under 3 minutes\",\n    category: \"speed\",\n    rarity: \"uncommon\",\n    icon: \"🎯\",\n    condition: { type: \"quiz_time\", maxTime: 180, minQuestions: 15, minAccuracy: 80 },\n  },\n  {\n    id: \"speed_master\",\n    name: \"Speed Master\",\n    description: \"Complete 20-question quiz in under 2 minutes\",\n    category: \"speed\",\n    rarity: \"rare\",\n    icon: \"🏎️\",\n    condition: { type: \"quiz_time\", maxTime: 120, minQuestions: 20, minAccuracy: 85 },\n  },\n  {\n    id: \"flash_learner\",\n    name: \"Flash Learner\",\n    description: \"Answer 50 questions in under 5 minutes\",\n    category: \"speed\",\n    rarity: \"epic\",\n    icon: \"⚡\",\n    condition: { type: \"quiz_time\", maxTime: 300, minQuestions: 50, minAccuracy: 80 },\n  },\n\n  // ADDITIONAL FUN ACHIEVEMENTS\n  {\n    id: \"half_century\",\n    name: \"Half Century\",\n    description: \"Score exactly 50%\",\n    category: \"fun\",\n    rarity: \"common\",\n    icon: \"🎲\",\n    condition: { type: \"exact_score\", value: 50 },\n  },\n  {\n    id: \"lucky_13\",\n    name: \"Lucky 13\",\n    description: \"Score exactly 13 points\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"🍀\",\n    condition: { type: \"exact_score\", value: 13 },\n  },\n  {\n    id: \"perfect_69\",\n    name: \"Nice\",\n    description: \"Score exactly 69%\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"😎\",\n    condition: { type: \"exact_score\", value: 69 },\n  },\n  {\n    id: \"triple_three\",\n    name: \"Triple Three\",\n    description: \"Score exactly 33%\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"3️⃣\",\n    condition: { type: \"exact_score\", value: 33 },\n  },\n  {\n    id: \"breakfast_club\",\n    name: \"Breakfast Club\",\n    description: \"Study at 7am for 3 days in a row\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"🥞\",\n    condition: { type: \"study_hour\", hour: 7, days: 3 },\n  },\n  {\n    id: \"lunch_learner\",\n    name: \"Lunch Learner\",\n    description: \"Study at noon for 5 days\",\n    category: \"fun\",\n    rarity: \"uncommon\",\n    icon: \"🍽️\",\n    condition: { type: \"study_hour\", hour: 12, days: 5 },\n  },\n  {\n    id: \"witching_hour\",\n    name: \"Witching Hour\",\n    description: \"Study at 3am\",\n    category: \"fun\",\n    rarity: \"rare\",\n    icon: \"🧙\",\n    condition: { type: \"study_hour\", hour: 3, days: 1 },\n  },\n\n  // ADDITIONAL SPECIAL ACHIEVEMENTS\n  {\n    id: \"first_user\",\n    name: \"Pioneer\",\n    description: \"One of the first 10 users\",\n    category: \"special\",\n    rarity: \"legendary\",\n    icon: \"🌟\",\n    condition: { type: \"quizzes_completed\", value: 1 },\n  },\n  {\n    id: \"beta_tester\",\n    name: \"Beta Tester\",\n    description: \"One of the first 50 users\",\n    category: \"special\",\n    rarity: \"epic\",\n    icon: \"🧪\",\n    condition: { type: \"quizzes_completed\", value: 1 },\n  },\n  {\n    id: \"comeback\",\n    name: \"Comeback Story\",\n    description: \"Return after 30 days absence\",\n    category: \"special\",\n    rarity: \"uncommon\",\n    icon: \"🔄\",\n    condition: { type: \"quizzes_completed\", value: 2 },\n  },\n  {\n    id: \"dedication\",\n    name: \"True Dedication\",\n    description: \"Study every single day for a month\",\n    category: \"special\",\n    rarity: \"epic\",\n    icon: \"💪\",\n    condition: { type: \"streak_days\", value: 30 },\n  },\n  {\n    id: \"night_shift\",\n    name: \"Night Shift\",\n    description: \"Complete 10 quizzes between midnight and 5am\",\n    category: \"special\",\n    rarity: \"rare\",\n    icon: \"🌃\",\n    condition: { type: \"quizzes_completed\", value: 10 },\n  },\n  {\n    id: \"weekend_grind\",\n    name: \"Weekend Grind\",\n    description: \"Complete 50 quizzes on weekends only\",\n    category: \"special\",\n    rarity: \"uncommon\",\n    icon: \"📅\",\n    condition: { type: \"quizzes_completed\", value: 50 },\n  },\n\n  // FINAL 3 ACHIEVEMENTS TO REACH 100\n  {\n    id: \"quiz_addict\",\n    name: \"Quiz Addict\",\n    description: \"Complete 25 quizzes in a single day\",\n    category: \"volume\",\n    rarity: \"legendary\",\n    icon: \"🎮\",\n    condition: { type: \"quizzes_in_day\", value: 25 },\n  },\n  {\n    id: \"knowledge_vault\",\n    name: \"Knowledge Vault\",\n    description: \"Answer 10,000 questions\",\n    category: \"volume\",\n    rarity: \"legendary\",\n    icon: \"📚\",\n    condition: { type: \"questions_answered\", value: 10000 },\n  },\n  {\n    id: \"ultimate_scholar\",\n    name: \"Ultimate Scholar\",\n    description: \"Complete 2,000 quizzes\",\n    category: \"milestone\",\n    rarity: \"legendary\",\n    icon: \"🏆\",\n    condition: { type: \"quizzes_completed\", value: 2000 },\n  },\n];\n\nexport function getRarityColor(rarity: string): string {\n  switch (rarity) {\n    case \"common\":\n      return \"text-gray-400 dark:text-gray-500\";\n    case \"uncommon\":\n      return \"text-green-500 dark:text-green-400\";\n    case \"rare\":\n      return \"text-blue-500 dark:text-blue-400\";\n    case \"epic\":\n      return \"text-purple-500 dark:text-purple-400\";\n    case \"legendary\":\n      return \"text-yellow-500 dark:text-yellow-400\";\n    default:\n      return \"text-gray-400\";\n  }\n}\n\nexport function getRarityBadgeColor(rarity: string): string {\n  switch (rarity) {\n    case \"common\":\n      return \"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300\";\n    case \"uncommon\":\n      return \"bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300\";\n    case \"rare\":\n      return \"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300\";\n    case \"epic\":\n      return \"bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300\";\n    case \"legendary\":\n      return \"bg-gradient-to-r from-yellow-400 to-orange-500 text-white\";\n    default:\n      return \"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300\";\n  }\n}\n","size_bytes":26034},"server/achievement-checker.ts":{"content":"import { storage } from \"./storage\";\nimport { ACHIEVEMENT_DEFINITIONS, type AchievementCondition } from \"./achievements\";\nimport { QuizResult } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { quizResults, studyActivity, studySessions } from \"@shared/schema\";\nimport { eq, sql, and, desc, gte } from \"drizzle-orm\";\n\ninterface UserStats {\n  userId: string;\n  totalQuizzes: number;\n  totalQuestions: number;\n  perfectScores: number;\n  consecutivePerfect: number;\n  recentAccuracy: number[];\n  allQuizResults: QuizResult[];\n  uniqueTopics: Set<string>;\n  streak: number;\n  totalStudyTime: number;\n  todayQuizzes: number;\n}\n\nexport async function checkAndAwardAchievements(\n  userId: string,\n  latestQuizResult: QuizResult\n): Promise<string[]> {\n  const stats = await getUserStats(userId);\n  const newlyUnlocked: string[] = [];\n\n  for (const achievement of ACHIEVEMENT_DEFINITIONS) {\n    const hasIt = await storage.hasAchievement(userId, achievement.id);\n    if (hasIt) continue;\n\n    const condition = achievement.condition as AchievementCondition;\n    const earned = await checkCondition(condition, stats, latestQuizResult);\n\n    if (earned) {\n      await storage.awardAchievement(userId, achievement.id);\n      newlyUnlocked.push(achievement.id);\n    }\n  }\n\n  return newlyUnlocked;\n}\n\nasync function getUserStats(userId: string): Promise<UserStats> {\n  const allQuizResults = await storage.getUserQuizResults(userId);\n  const sessions = await storage.getUserStudySessions(userId);\n  const streak = await storage.getStreak(userId);\n  const activities = await storage.getUserActivity(userId, 365);\n\n  const totalStudyTime = activities.reduce((sum, a) => sum + a.studyTime, 0);\n  \n  const today = new Date().toISOString().split(\"T\")[0];\n  const todayQuizzes = allQuizResults.filter(\n    (qr) => qr.createdAt && qr.createdAt.toISOString().split(\"T\")[0] === today\n  ).length;\n\n  const uniqueTopics = new Set<string>();\n  for (const session of sessions) {\n    uniqueTopics.add(session.topic);\n  }\n\n  const perfectScores = allQuizResults.filter(\n    (qr) => qr.score === qr.totalQuestions\n  ).length;\n\n  let consecutivePerfect = 0;\n  for (const qr of allQuizResults) {\n    if (qr.score === qr.totalQuestions) {\n      consecutivePerfect++;\n    } else {\n      break;\n    }\n  }\n\n  const recentAccuracy = allQuizResults\n    .slice(0, 20)\n    .map((qr) => (qr.score / qr.totalQuestions) * 100);\n\n  const totalQuestions = allQuizResults.reduce((sum, qr) => sum + qr.totalQuestions, 0);\n\n  return {\n    userId,\n    totalQuizzes: allQuizResults.length,\n    totalQuestions,\n    perfectScores,\n    consecutivePerfect,\n    recentAccuracy,\n    allQuizResults,\n    uniqueTopics,\n    streak,\n    totalStudyTime,\n    todayQuizzes,\n  };\n}\n\nasync function checkCondition(\n  condition: AchievementCondition,\n  stats: UserStats,\n  latestQuiz: QuizResult\n): Promise<boolean> {\n  switch (condition.type) {\n    case \"quizzes_completed\":\n      return stats.totalQuizzes >= condition.value;\n\n    case \"perfect_score\":\n      return stats.perfectScores >= condition.value;\n\n    case \"consecutive_perfect\":\n      return stats.consecutivePerfect >= condition.value;\n\n    case \"accuracy_average\": {\n      if (stats.recentAccuracy.length < condition.over) return false;\n      const avg = stats.recentAccuracy.slice(0, condition.over).reduce((a, b) => a + b, 0) / condition.over;\n      return avg >= condition.value;\n    }\n\n    case \"accuracy_with_score\": {\n      const accuracy = (latestQuiz.score / latestQuiz.totalQuestions) * 100;\n      return accuracy >= condition.accuracy && latestQuiz.score >= condition.minScore;\n    }\n\n    case \"questions_answered\":\n      return stats.totalQuestions >= condition.value;\n\n    case \"quizzes_in_day\":\n      return stats.todayQuizzes >= condition.value;\n\n    case \"different_topics\":\n      return stats.uniqueTopics.size >= condition.value;\n\n    case \"questions_in_topic\": {\n      const topicQuizzes = stats.allQuizResults.filter((qr) => {\n        return true;\n      });\n      const topicQuestions = topicQuizzes.reduce((sum, qr) => sum + qr.totalQuestions, 0);\n      return topicQuestions >= condition.value;\n    }\n\n    case \"streak_days\":\n      return stats.streak >= condition.value;\n\n    case \"study_time\":\n      return stats.totalStudyTime >= condition.value;\n\n    case \"leaderboard_position\":\n      return false;\n\n    case \"leaderboard_rank_one\":\n      return false;\n\n    case \"users_beaten\":\n      return false;\n\n    case \"quiz_time\": {\n      return false;\n    }\n\n    case \"improvement\":\n      return false;\n\n    case \"exact_score\": {\n      const percentage = Math.round((latestQuiz.score / latestQuiz.totalQuestions) * 100);\n      return percentage === condition.value || latestQuiz.score === condition.value;\n    }\n\n    case \"study_hour\": {\n      const quizHour = latestQuiz.createdAt ? latestQuiz.createdAt.getHours() : -1;\n      if (condition.hour === 0) {\n        return quizHour === 0 || quizHour === 24;\n      }\n      return quizHour < condition.hour && stats.streak >= condition.days;\n    }\n\n    default:\n      return false;\n  }\n}\n","size_bytes":5058},"client/src/pages/achievements.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Lock, Trophy, Target, Zap, TrendingUp, Users, Clock, Star, Sparkles } from \"lucide-react\";\nimport type { AchievementWithProgress } from \"@shared/schema\";\n\nconst rarityColors = {\n  common: \"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300\",\n  uncommon: \"bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300\",\n  rare: \"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300\",\n  epic: \"bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300\",\n  legendary: \"bg-gradient-to-r from-yellow-400 to-orange-500 text-white\",\n};\n\nconst categoryIcons: Record<string, any> = {\n  milestone: Target,\n  accuracy: Trophy,\n  streak: Zap,\n  volume: TrendingUp,\n  improvement: Star,\n  leaderboard: Users,\n  speed: Clock,\n  special: Sparkles,\n  fun: Star,\n};\n\nexport default function Achievements() {\n  const { data: achievements = [], isLoading } = useQuery<AchievementWithProgress[]>({\n    queryKey: [\"/api/achievements/me\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-48 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const unlockedCount = achievements.filter((a) => a.unlocked).length;\n  const totalCount = achievements.length;\n  const completionPercentage = Math.round((unlockedCount / totalCount) * 100);\n\n  const rarityStats = {\n    common: achievements.filter((a) => a.rarity === \"common\" && a.unlocked).length,\n    uncommon: achievements.filter((a) => a.rarity === \"uncommon\" && a.unlocked).length,\n    rare: achievements.filter((a) => a.rarity === \"rare\" && a.unlocked).length,\n    epic: achievements.filter((a) => a.rarity === \"epic\" && a.unlocked).length,\n    legendary: achievements.filter((a) => a.rarity === \"legendary\" && a.unlocked).length,\n  };\n\n  const categories = [\n    \"all\",\n    \"milestone\",\n    \"accuracy\",\n    \"streak\",\n    \"volume\",\n    \"improvement\",\n    \"leaderboard\",\n    \"speed\",\n    \"special\",\n    \"fun\",\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 dark:from-gray-900 dark:via-purple-900/20 dark:to-blue-900/20\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-page-title\">\n                Achievements\n              </h1>\n              <p className=\"text-muted-foreground mt-2\">\n                Track your progress and unlock rewards\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-achievement-count\">\n                {unlockedCount}/{totalCount}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Unlocked</div>\n            </div>\n          </div>\n\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-2\">\n            <CardHeader>\n              <CardTitle>Overall Progress</CardTitle>\n              <CardDescription>\n                {completionPercentage}% Complete\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Progress value={completionPercentage} className=\"h-3\" data-testid=\"progress-overall\" />\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                <div className=\"text-center\">\n                  <Badge className={rarityColors.common}>Common</Badge>\n                  <div className=\"text-2xl font-bold mt-2\" data-testid=\"text-common-count\">{rarityStats.common}</div>\n                </div>\n                <div className=\"text-center\">\n                  <Badge className={rarityColors.uncommon}>Uncommon</Badge>\n                  <div className=\"text-2xl font-bold mt-2\" data-testid=\"text-uncommon-count\">{rarityStats.uncommon}</div>\n                </div>\n                <div className=\"text-center\">\n                  <Badge className={rarityColors.rare}>Rare</Badge>\n                  <div className=\"text-2xl font-bold mt-2\" data-testid=\"text-rare-count\">{rarityStats.rare}</div>\n                </div>\n                <div className=\"text-center\">\n                  <Badge className={rarityColors.epic}>Epic</Badge>\n                  <div className=\"text-2xl font-bold mt-2\" data-testid=\"text-epic-count\">{rarityStats.epic}</div>\n                </div>\n                <div className=\"text-center\">\n                  <Badge className={rarityColors.legendary}>Legendary</Badge>\n                  <div className=\"text-2xl font-bold mt-2\" data-testid=\"text-legendary-count\">{rarityStats.legendary}</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-4\">\n          <TabsList className=\"flex flex-wrap h-auto gap-2 bg-white/80 dark:bg-gray-800/80 p-2\">\n            {categories.map((cat) => (\n              <TabsTrigger\n                key={cat}\n                value={cat}\n                className=\"capitalize\"\n                data-testid={`tab-${cat}`}\n              >\n                {cat}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {categories.map((category) => (\n            <TabsContent key={category} value={category} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {achievements\n                  .filter((a) => category === \"all\" || a.category === category)\n                  .sort((a, b) => {\n                    if (a.unlocked && !b.unlocked) return -1;\n                    if (!a.unlocked && b.unlocked) return 1;\n                    const rarityOrder = { legendary: 0, epic: 1, rare: 2, uncommon: 3, common: 4 };\n                    return rarityOrder[a.rarity as keyof typeof rarityOrder] - rarityOrder[b.rarity as keyof typeof rarityOrder];\n                  })\n                  .map((achievement) => {\n                    const Icon = categoryIcons[achievement.category] || Trophy;\n                    return (\n                      <Card\n                        key={achievement.id}\n                        className={`relative overflow-hidden transition-all hover:scale-105 ${\n                          achievement.unlocked\n                            ? \"bg-white dark:bg-gray-800 border-2 shadow-lg\"\n                            : \"bg-gray-100 dark:bg-gray-900 opacity-60\"\n                        }`}\n                        data-testid={`card-achievement-${achievement.id}`}\n                      >\n                        {achievement.unlocked && (\n                          <div className=\"absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-yellow-400/20 to-transparent rounded-bl-full\" />\n                        )}\n                        \n                        <CardHeader>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <div className={`text-4xl ${achievement.unlocked ? \"\" : \"grayscale\"}`}>\n                                  {achievement.icon}\n                                </div>\n                                {!achievement.unlocked && (\n                                  <Lock className=\"w-5 h-5 text-gray-400\" />\n                                )}\n                              </div>\n                              <CardTitle className=\"text-lg\" data-testid={`text-achievement-name-${achievement.id}`}>\n                                {achievement.name}\n                              </CardTitle>\n                              <CardDescription className=\"text-sm mt-1\">\n                                {achievement.description}\n                              </CardDescription>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2 mt-3\">\n                            <Badge className={rarityColors[achievement.rarity as keyof typeof rarityColors]}>\n                              {achievement.rarity}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"capitalize\">\n                              <Icon className=\"w-3 h-3 mr-1\" />\n                              {achievement.category}\n                            </Badge>\n                          </div>\n                        </CardHeader>\n\n                        {achievement.unlocked && achievement.unlockedAt && (\n                          <CardContent>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Unlocked {new Date(achievement.unlockedAt).toLocaleDateString()}\n                            </div>\n                          </CardContent>\n                        )}\n\n                        {!achievement.unlocked && achievement.progress !== undefined && achievement.total !== undefined && (\n                          <CardContent>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-xs\">\n                                <span>Progress</span>\n                                <span>{achievement.progress}/{achievement.total}</span>\n                              </div>\n                              <Progress \n                                value={(achievement.progress / achievement.total) * 100} \n                                className=\"h-2\"\n                              />\n                            </div>\n                          </CardContent>\n                        )}\n                      </Card>\n                    );\n                  })}\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10663},"client/src/components/achievement-unlock-notification.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport confetti from \"canvas-confetti\";\nimport type { Achievement } from \"@shared/schema\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AchievementUnlockNotificationProps {\n  achievementIds: string[];\n  onClose: () => void;\n}\n\nconst rarityColors = {\n  common: \"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300\",\n  uncommon: \"bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 border-green-400\",\n  rare: \"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 border-blue-400\",\n  epic: \"bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 border-purple-400\",\n  legendary: \"bg-gradient-to-r from-yellow-400 to-orange-500 text-white border-yellow-500\",\n};\n\nexport function AchievementUnlockNotification({\n  achievementIds,\n  onClose,\n}: AchievementUnlockNotificationProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const { data: allAchievements = [] } = useQuery<Achievement[]>({\n    queryKey: [\"/api/achievements\"],\n  });\n\n  const achievements = achievementIds\n    .map((id) => allAchievements.find((a) => a.id === id))\n    .filter((a): a is Achievement => !!a);\n\n  useEffect(() => {\n    if (achievements.length === 0) return;\n\n    setIsVisible(true);\n\n    const rarityConfetti: Record<string, any> = {\n      common: {\n        particleCount: 50,\n        spread: 60,\n        colors: [\"#9CA3AF\", \"#D1D5DB\"],\n      },\n      uncommon: {\n        particleCount: 75,\n        spread: 70,\n        colors: [\"#10B981\", \"#34D399\"],\n      },\n      rare: {\n        particleCount: 100,\n        spread: 80,\n        colors: [\"#3B82F6\", \"#60A5FA\"],\n      },\n      epic: {\n        particleCount: 150,\n        spread: 90,\n        colors: [\"#8B5CF6\", \"#A78BFA\"],\n      },\n      legendary: {\n        particleCount: 200,\n        spread: 100,\n        colors: [\"#FCD34D\", \"#FBBF24\", \"#F59E0B\"],\n        shapes: [\"star\"],\n      },\n    };\n\n    const achievement = achievements[currentIndex];\n    if (achievement) {\n      const confettiConfig = rarityConfetti[achievement.rarity] || rarityConfetti.common;\n\n      confetti({\n        ...confettiConfig,\n        origin: { y: 0.6 },\n      });\n\n      if (achievement.rarity === \"legendary\") {\n        setTimeout(() => {\n          confetti({\n            ...confettiConfig,\n            origin: { x: 0.2, y: 0.6 },\n          });\n        }, 200);\n        setTimeout(() => {\n          confetti({\n            ...confettiConfig,\n            origin: { x: 0.8, y: 0.6 },\n          });\n        }, 400);\n      }\n    }\n  }, [currentIndex, achievements]);\n\n  const handleNext = () => {\n    if (currentIndex < achievements.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      setIsVisible(false);\n      setTimeout(onClose, 300);\n    }\n  };\n\n  if (achievements.length === 0 || !isVisible) return null;\n\n  const achievement = achievements[currentIndex];\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-in fade-in\">\n      <Card\n        className={`w-full max-w-md mx-4 animate-in zoom-in slide-in-from-bottom-4 border-4 ${\n          rarityColors[achievement.rarity as keyof typeof rarityColors]\n        }`}\n        data-testid=\"card-achievement-unlock\"\n      >\n        <CardHeader className=\"relative\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute top-2 right-2\"\n            onClick={() => {\n              setIsVisible(false);\n              setTimeout(onClose, 300);\n            }}\n            data-testid=\"button-close-achievement\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"text-center space-y-2\">\n            <div className=\"text-6xl animate-bounce\">{achievement.icon}</div>\n            <Badge\n              className={`${rarityColors[achievement.rarity as keyof typeof rarityColors]} text-base px-4 py-1`}\n            >\n              {achievement.rarity.toUpperCase()}\n            </Badge>\n            <CardTitle className=\"text-2xl text-gray-900 dark:text-white\">\n              Achievement Unlocked!\n            </CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <div>\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\" data-testid=\"text-achievement-title\">\n              {achievement.name}\n            </h3>\n            <p className=\"text-muted-foreground\">{achievement.description}</p>\n          </div>\n\n          <div className=\"pt-4\">\n            <Button\n              onClick={handleNext}\n              className=\"w-full\"\n              data-testid=\"button-next-achievement\"\n            >\n              {currentIndex < achievements.length - 1\n                ? `Next (${currentIndex + 1}/${achievements.length})`\n                : \"Awesome!\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5257},"server/seed-achievements.ts":{"content":"import { db } from \"./db\";\nimport { achievements } from \"@shared/schema\";\nimport { ACHIEVEMENT_DEFINITIONS } from \"./achievements\";\n\nasync function seedAchievements() {\n  console.log(\"Seeding achievements...\");\n  \n  for (const achievement of ACHIEVEMENT_DEFINITIONS) {\n    await db\n      .insert(achievements)\n      .values(achievement)\n      .onConflictDoUpdate({\n        target: achievements.id,\n        set: {\n          name: achievement.name,\n          description: achievement.description,\n          category: achievement.category,\n          rarity: achievement.rarity,\n          icon: achievement.icon,\n          condition: achievement.condition,\n        },\n      });\n  }\n  \n  console.log(`✓ Seeded ${ACHIEVEMENT_DEFINITIONS.length} achievements`);\n  process.exit(0);\n}\n\nseedAchievements().catch((error) => {\n  console.error(\"Error seeding achievements:\", error);\n  process.exit(1);\n});\n","size_bytes":895}},"version":2}